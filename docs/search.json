[{"path":"https://dbaranger.github.io/InteractionPoweR/articles/CommonQuestions.html","id":"questions","dir":"Articles","previous_headings":"","what":"Questions","title":"Questions & Errors","text":"“package currently support power analyses 3-way interactions?” Yes! See new function power_interaction_3way_r2(). plan adding simulation-based power analyses 3-way interactions. Please get touch research question needs functionality.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/CommonQuestions.html","id":"error-messages","dir":"Articles","previous_headings":"","what":"Error messages","title":"Questions & Errors","text":"“reliabilities must greater 0 less equal 1” Reliability can’t 1 (measurement variance attributable true signal can’t 100%), can’t less equal 0. reliability measure less 0, probably spuriously low, set reliability something like 0.001. “correlations must within [-1,1]” main input effect sizes Pearson’s correlations, range [-1,1]. see error, check typos input. “correlations must within [-1,1],.” “valid settings” adjust.correlations = TRUE, variable binary ordinal, algorithm increase correlations output correlations match effects input user. necessary transforming normal variables binary ordinal reduces correlations variables. However, can happen impossible, require correlations greater |1|. encounter error, reduce correlations variables. power_interaction() automatically removes settings input. “Settings produce negative y-variance” “valid settings” possible specify impossible correlation matrix. error indicates \\(X_1\\), \\(X_2\\), \\(X_1X_2\\) settings result explaining 100% \\(Y\\) variance - obviously impossible. encounter error, reduce correlations. “Correlation matrix impossible - positive semi-definite.” Another way correlation matrix can “impossible”. error means smallest eigenvalue negative. error can caused correlations large variables binary/ordinal correlations transformed. encounter error, reduce correlations. Something else covered… get different confusing error, first check packages date. frequently occurs dplyr ggplot2 packages, make sure updated first (.e., re-install ).","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/CommonQuestions.html","id":"strange-results","dir":"Articles","previous_headings":"","what":"Strange results","title":"Questions & Errors","text":"power_estimate() produces NA. power_estimate() fits regression model output power_interaction() identify specified power-level reached. give result NA three related reasons: predicted value power reached outside range values tested simulation. Simply increase range values tested. predicted value within range values tested, barely. example, say power_target = .8, one simulation achieved pwr = 0.804. Even though 0.804 achieved one round simulations, regression analysis may predict, based values tested simulation, even larger value needed achieve 80% power. solution increase range values tested. Power-curves taper-power increases, eventually flattening . power_estimate() fits threshold regression model using chngpt package, identify whether power-curve flattened, remove flattened portion . main power_estimate() regression model accurate. However, occasionally threshold regression model greedy, removes much. can happen particularly simulation includes values. solution increase range values tested. Results differ time run simulation examples package use n.iter = 1000 simulations, enough give general sense pattern results. However, recommend n.iter = 10000 stable results. power_estimate() fits regression model, regression, number observations, well variance, impacts results. , increasing range density parameters simulation also improve stability results. seed parameter can also set, identical results given time. However, recommended results stabilized (increasing n.iter). seed set n.iter = 50 yield results every time, doesn’t mean results informative.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPower2waycovsvignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Interaction Power: Power analyses for 2-way interactions with covariates","text":"two-way interaction analysis two covariates (example, number allowable) take form: \\[ Y \\sim \\beta_0 + X_1\\beta_1 + X_2\\beta_2 + X_1X_2\\beta_3+ C_1\\beta_5 + C_2\\beta_6 + C_1X_1\\beta_7 + C_1X_2\\beta_8 + C_2X_1\\beta_9 + C_2X_2\\beta_{10} + \\epsilon \\] \\(C_i\\) covariates, \\(C_iX_i\\) interactions covariates main variables interest. inclusion \\(C_iX_i\\) terms may surprise users. However, well established failure include can lead false-positive results, omitted variable bias. can occur \\(C_iX_i\\) independent predictor \\(Y\\), also simply \\(cor(X_i,C_i)\\) non-zero (.e., covariate correlated either main interaction terms). relevant citations: Hull et al., 1992, Yzerbyt et al., 2004, Keller, 2014, blogs: Baranger, Simonsohn.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPower2waycovsvignette.html","id":"running-an-analysis","dir":"Articles","previous_headings":"Introduction","what":"Running an analysis","title":"Interaction Power: Power analyses for 2-way interactions with covariates","text":"First, function generate.interaction.cov.input() used setup input correlations power analysis. input number covariates. generates named list. correlations default 0 reliabilites 1. Modify list -needed power analysis: Now run power analysis power_interaction_r2_covs() function: always, can plot power curve:  can estimate power curve intersects desired level power: Even though analytic power analyses fast, many parameters can easily reach point analysis take long time run. Say instance interested testing 10 different values 4 different parameters - ’s 10,000 power analyses. point, can helpful run things parallel. Parallel analyses can run using cl flag. cl=4 probably reasonable value personal computers.","code":"library(InteractionPoweR) power.input = generate.interaction.cov.input(c.num = 2) # number of covariates head(power.input$correlations) ## $r.y.x1 ## [1] 0 ##  ## $r.y.x2 ## [1] 0 ##  ## $r.y.c1 ## [1] 0 ##  ## $r.y.c2 ## [1] 0 ##  ## $r.y.x1x2 ## [1] 0 ##  ## $r.y.c1x1 ## [1] 0 head(power.input$reliability) ## $rel.y ## [1] 1 ##  ## $rel.x1 ## [1] 1 ##  ## $rel.x2 ## [1] 1 ##  ## $rel.c1 ## [1] 1 ##  ## $rel.c2 ## [1] 1 power.input$correlations$r.y.x1 = .3 power.input$correlations$r.y.x2 = .2 power.input$correlations$r.y.c1 = .1 power.input$correlations$r.y.c2 = .2 power.input$correlations$r.y.x1x2 = seq(0.01,.1,.01) # inputs can be single values or vectors power.input$correlations$r.x1.x2 = .2 power.input$correlations$r.c1.c2 = .3 power.input$correlations$r.x1.c1 = .1 power.input$correlations$r.x2.c1 = .1 pwr.analysis = power_interaction_r2_covs(cov.input =power.input, # our parameters                           N = c(1000)                           ) ## Performing 10 analyses ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union pwr.analysis ##           pwr r.y.x1 r.y.x2 r.y.c1 r.y.c2 r.y.x1x2 r.y.c1x1 r.y.c1x2 r.y.c2x1 ## 1  0.06378639    0.3    0.2    0.1    0.2     0.01        0        0        0 ## 2  0.10625113    0.3    0.2    0.1    0.2     0.02        0        0        0 ## 3  0.17927387    0.3    0.2    0.1    0.2     0.03        0        0        0 ## 4  0.28210473    0.3    0.2    0.1    0.2     0.04        0        0        0 ## 5  0.40826630    0.3    0.2    0.1    0.2     0.05        0        0        0 ## 6  0.54510518    0.3    0.2    0.1    0.2     0.06        0        0        0 ## 7  0.67680533    0.3    0.2    0.1    0.2     0.07        0        0        0 ## 8  0.78938929    0.3    0.2    0.1    0.2     0.08        0        0        0 ## 9  0.87489380    0.3    0.2    0.1    0.2     0.09        0        0        0 ## 10 0.93259046    0.3    0.2    0.1    0.2     0.10        0        0        0 ##    r.y.c2x2 r.x1.x2 r.x1.c1 r.x1.c2 r.x1.c1x2 r.x1.c2x2 r.x2.c1 r.x2.c2 ## 1         0     0.2     0.1       0         0         0     0.1       0 ## 2         0     0.2     0.1       0         0         0     0.1       0 ## 3         0     0.2     0.1       0         0         0     0.1       0 ## 4         0     0.2     0.1       0         0         0     0.1       0 ## 5         0     0.2     0.1       0         0         0     0.1       0 ## 6         0     0.2     0.1       0         0         0     0.1       0 ## 7         0     0.2     0.1       0         0         0     0.1       0 ## 8         0     0.2     0.1       0         0         0     0.1       0 ## 9         0     0.2     0.1       0         0         0     0.1       0 ## 10        0     0.2     0.1       0         0         0     0.1       0 ##    r.x2.c1x1 r.x2.c2x1 r.c1.c2 r.c1.x1x2 r.c1.c2x1 r.c1.c2x2 r.c2.x1x2 ## 1          0         0     0.3         0         0         0         0 ## 2          0         0     0.3         0         0         0         0 ## 3          0         0     0.3         0         0         0         0 ## 4          0         0     0.3         0         0         0         0 ## 5          0         0     0.3         0         0         0         0 ## 6          0         0     0.3         0         0         0         0 ## 7          0         0     0.3         0         0         0         0 ## 8          0         0     0.3         0         0         0         0 ## 9          0         0     0.3         0         0         0         0 ## 10         0         0     0.3         0         0         0         0 ##    r.c2.c1x1 r.c2.c1x2 rel.y rel.x1 rel.x2 rel.c1 rel.c2 alpha    N ## 1          0         0     1      1      1      1      1  0.05 1000 ## 2          0         0     1      1      1      1      1  0.05 1000 ## 3          0         0     1      1      1      1      1  0.05 1000 ## 4          0         0     1      1      1      1      1  0.05 1000 ## 5          0         0     1      1      1      1      1  0.05 1000 ## 6          0         0     1      1      1      1      1  0.05 1000 ## 7          0         0     1      1      1      1      1  0.05 1000 ## 8          0         0     1      1      1      1      1  0.05 1000 ## 9          0         0     1      1      1      1      1  0.05 1000 ## 10         0         0     1      1      1      1      1  0.05 1000 plot_power_curve(power_data = pwr.analysis,x = \"r.y.x1x2\") power_estimate(power_data = pwr.analysis,x = \"r.y.x1x2\",power_target = 0.8) ## [1] 0.08112818"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR3wayvignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Interaction Power: Power analyses for 3-way interactions","text":"Three-way interaction analyses take form: \\[ Y \\sim \\beta_0 + X_1\\beta_1 + X_2\\beta_2 + X_3\\beta_3 +X_1X_2\\beta_4 + X_1X_3\\beta_5 +X_2X_3\\beta_6 +X_1X_2X_3\\beta_7 +\\epsilon \\] ’s lot effect sizes! think correlation matrix linear regression 7 independent variables, ’s 28 different correlations. Luckily, assumptions - everything mean-centered variables multivariate normal, 10 effects need specified. See Urge et al. . user needs specify relation variable dependent variable \\(Y\\) (7 effects), well correlations \\(X_1\\), \\(X_2\\), \\(X_3\\) (3 effects). correlations either 0 fully determined correlations \\(X_1\\), \\(X_2\\), \\(X_3\\). 2-way interactions, assumptions result handy outcome interaction term uncorrelated main effects. case 3-way interactions. fact, 3-way interaction term nearly always correlated least one main effects (\\(X_1\\), \\(X_2\\), \\(X_3\\)) unless correlations \\(X_1\\), \\(X_2\\), \\(X_3\\) 0. Luckily, 3-way interaction term uncorrelated 2-way interaction terms (correlated ), least ’s . Even , multicollinearity fact life ’re testing 3-way interactions. result multicollinearity inherent 3-way interactions, correlation \\(Y\\) \\(X_1X_2X_3\\) useful metric interaction effect size. example, correlation small, magnitude regression coefficient \\(\\beta_7\\) easily opposite sign, still significant. Thus, instead correlation, power analysis function 3-way interactions uses \\(\\beta_7\\) interaction effect users specify. always, users option specifying reliability \\(Y\\), \\(X_1\\), \\(X_2\\), \\(X_3\\). default 1 (perfect reliability), though almost guaranteed unreasonable assumption observational research. Special thanks StackExchange user R Carnell helping formula reliability 3-way interaction term.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR3wayvignette.html","id":"first-steps","dir":"Articles","previous_headings":"Introduction","what":"First steps","title":"Interaction Power: Power analyses for 3-way interactions","text":"Ok, lets run power analysis single regression. see 40% power.","code":"library(InteractionPoweR) power.results=  power_interaction_3way_r2(N = 800,         # Sample size                                             b.x1x2x3 = .05,  # Interaction regression coefficient                                             r.x1.y = .4,     # Main effects                                             r.x2.y = .3,                                             r.x3.y = .2,                                             r.x1x2.y = .01,  # 2-way interactions                                             r.x1x3.y = .05,                                             r.x2x3.y = .1,                                             r.x1.x2 = .3,    # Correlation between main effects                                             r.x1.x3 = .1,                                             r.x2.x3 = .2) ## Performing 1 analyses ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union power.results ##         pwr   N b.x1x2x3 r.y.x1 r.y.x2 r.y.x3 r.y.x1x2 r.y.x1x3 r.y.x2x3 ## 1 0.4022313 800     0.05    0.4    0.3    0.2     0.01     0.05      0.1 ##   r.x1.x2 r.x1.x3 r.x2.x3 rel.x1 rel.x2 rel.x3 rel.y alpha ## 1     0.3     0.1     0.2      1      1      1     1  0.05"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR3wayvignette.html","id":"getting-more-information","dir":"Articles","previous_headings":"Introduction","what":"Getting more information","title":"Interaction Power: Power analyses for 3-way interactions","text":"can still request detailed_results = TRUE get information analysis: yields lot information, including observed \\(f^2\\), \\(TotalR^2\\) \\(NullR^2\\), correlation variables (obs.r) regression slopes (obs.b). added convenience functions help make sense output. First, can look correlation matrix data frame plot  Note \\(\\beta_7\\) 0.05, pairwise correlation \\(Y\\) \\(X_1X_2X_3\\) 0.198. can also look simple slopes data frame plot","code":"power.results=  power_interaction_3way_r2(N = 800,         # Sample size                                             b.x1x2x3 = .05,  # Interaction regression coefficient                                             r.x1.y = .4,     # Main effects                                             r.x2.y = .3,                                             r.x3.y = .2,                                             r.x1x2.y = .01,  # 2-way interactions                                             r.x1x3.y = .05,                                             r.x2x3.y = .1,                                             r.x1.x2 = .3,    # Correlation between main effects                                             r.x1.x3 = .1,                                             r.x2.x3 = .2,                                             detailed_results = TRUE) ## Performing 1 analyses power.results ##         pwr   N b.x1x2x3 r.y.x1 r.y.x2 r.y.x3 r.y.x1x2 r.y.x1x3 r.y.x2x3 ## 1 0.4022313 800     0.05    0.4    0.3    0.2     0.01     0.05      0.1 ##   r.x1.x2 r.x1.x3 r.x2.x3 rel.x1 rel.x2 rel.x3 rel.y alpha          f2 ## 1     0.3     0.1     0.2      1      1      1     1  0.05 0.003705323 ##     totalr2    nullr2  df  obs.b.x1  obs.b.x2  obs.b.x3   obs.b.x1x2 obs.b.x1x3 ## 1 0.2256198 0.2227398 793 0.3248624 0.1681651 0.1168807 -0.008733347 0.02243407 ##   obs.b.x2x3 obs.b.x1x2x3 obs.r.y.x1 obs.r.y.x2 obs.r.y.x3 obs.r.y.x1x2 ## 1 0.09249887         0.05        0.4        0.3        0.2         0.01 ##   obs.r.y.x1x3 obs.r.y.x2x3 obs.r.y.x1x2x3 obs.r.x1.x2 obs.r.x1.x3 ## 1         0.05          0.1      0.1975028         0.3         0.1 ##   obs.r.x1.x1x2 obs.r.x1.x1x3 obs.r.x1.x2x3 obs.r.x1.x1x2x3 obs.r.x2.x3 ## 1             0             0             0       0.2256183         0.2 ##   obs.r.x2.x1x2 obs.r.x2.x1x3 obs.r.x2.x2x3 obs.r.x2.x1x2x3 obs.r.x3.x1x2 ## 1             0             0             0       0.1909078             0 ##   obs.r.x3.x1x3 obs.r.x3.x2x3 obs.r.x3.x1x2x3 obs.r.x1x2.x1x3 obs.r.x1x2.x2x3 ## 1             0             0       0.2950393       0.2192067       0.1502762 ##   obs.r.x1x2.x1x2x3 obs.r.x1x3.x2x3 obs.r.x1x3.x1x2x3 obs.r.x2x3.x1x2x3 ## 1                 0       0.3122286                 0                 0 cor.mat.3way(power.results = power.results) ##                y        x1        x2        x3      x1x2      x1x3      x2x3 ## y      1.0000000 0.4000000 0.3000000 0.2000000 0.0100000 0.0500000 0.1000000 ## x1     0.4000000 1.0000000 0.3000000 0.1000000 0.0000000 0.0000000 0.0000000 ## x2     0.3000000 0.3000000 1.0000000 0.2000000 0.0000000 0.0000000 0.0000000 ## x3     0.2000000 0.1000000 0.2000000 1.0000000 0.0000000 0.0000000 0.0000000 ## x1x2   0.0100000 0.0000000 0.0000000 0.0000000 1.0000000 0.2192067 0.1502762 ## x1x3   0.0500000 0.0000000 0.0000000 0.0000000 0.2192067 1.0000000 0.3122286 ## x2x3   0.1000000 0.0000000 0.0000000 0.0000000 0.1502762 0.3122286 1.0000000 ## x1x2x3 0.1975028 0.2256183 0.1909078 0.2950393 0.0000000 0.0000000 0.0000000 ##           x1x2x3 ## y      0.1975028 ## x1     0.2256183 ## x2     0.1909078 ## x3     0.2950393 ## x1x2   0.0000000 ## x1x3   0.0000000 ## x2x3   0.0000000 ## x1x2x3 1.0000000 cor.mat.3way(power.results = power.results,return.plot = TRUE) simple.slopes.3way(power.results) ##      X2    X3   intercept     slope ## 1 -1 SD -1 SD -0.19254700 0.3611617 ## 2  Mean -1 SD -0.11688073 0.3024283 ## 3  1 SD -1 SD -0.04121447 0.2436950 ## 4 -1 SD  Mean -0.16816514 0.3335957 ## 5  Mean  Mean  0.00000000 0.3248624 ## 6  1 SD  Mean  0.16816514 0.3161290 ## 7 -1 SD  1 SD -0.14378327 0.3060298 ## 8  Mean  1 SD  0.11688073 0.3472965 ## 9  1 SD  1 SD  0.37754474 0.3885631 simple.slopes.3way(power.results,return.plot = TRUE)"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR3wayvignette.html","id":"running-multiple-analyses","dir":"Articles","previous_headings":"Introduction","what":"Running multiple analyses","title":"Interaction Power: Power analyses for 3-way interactions","text":"always, can run multiple power analyses can plot power curve  solve sample size need 90% power detect effect. example,need N=2781 achieve 90% power. Even though analytic power analyses fast, many parameters can easily reach point analysis take long time run. Say instance interested testing 10 different values 4 different parameters - ’s 10,000 power analyses. point, can helpful run things parallel. Parallel analyses can run using cl flag. cl=4 probably reasonable value personal computers.","code":"power.results=  power_interaction_3way_r2(N = seq(800,4000,100),         # Sample size                                             b.x1x2x3 = 0.05,  # Interaction regression coefficient                                             r.x1.y = .4,     # Main effects                                             r.x2.y = .3,                                             r.x3.y = .2,                                             r.x1x2.y = .01,  # 2-way interactions                                             r.x1x3.y = .05,                                             r.x2x3.y = .1,                                             r.x1.x2 = .3,    # Correlation between main effects                                             r.x1.x3 = .1,                                             r.x2.x3 = .2,                                             detailed_results = TRUE) ## Performing 33 analyses plot_power_curve(power_data = power.results,x = \"N\",power_target = .9) power_estimate(power_data = power.results,x = \"N\",power_target = .9) ## [1] 2780.854"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The InteractionPoweR Package","text":"Interaction analyses take form: \\[ Y \\sim \\beta_0 + X_1\\beta_1 + X_2\\beta_2 + X_1X_2\\beta_3 + \\epsilon \\] \\(Y\\) dependent variable, \\(X_1\\) \\(X_2\\) independent variables, interaction term \\(X_1X_2\\). \\(\\beta\\)s equation regression coefficients \\(\\epsilon\\) error. Note equation, throughout code package, refer two interacting variables \\(X_1\\) \\(X_2\\), opposed \\(X\\) \\(Z\\), \\(X\\) \\(M\\). emphasize , far simulations concerned, \\(X_1\\) \\(X_2\\) interchangeable, conclusions causality (.e. “moderation”) rely specifics variables. goal power analyses supported package determine much power analysis detect whether \\(\\beta_3\\) (interaction term regression coefficient) different 0 pre-specified \\(\\alpha\\) value (alpha, p-value). \\(\\alpha\\) refers false positive rate, frequently accept analysis incorrectly rejected null hypothesis. Power, refers true positive rate, frequently want correctly accept alternative hypothesis? may easier think inverse power, false negative rate: frequently incorrectly accept null hypothesis? “typical” (though necessarily recommended) value power 0.8, means 20%, \\(1/5\\), time, analysis incorrectly conclude effect actually one. (recommend striving least power .9)","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"effect-sizes","dir":"Articles","previous_headings":"","what":"Effect sizes","title":"The InteractionPoweR Package","text":"simulation package requires minimum 5 input variables: N: sample size. r.x1.y: Pearson’s correlation (\\(r\\)) \\(X_1\\) \\(Y\\) r.x2.y: Pearson’s correlation (\\(r\\)) \\(X_2\\) \\(Y\\) r.x1.x2: Pearson’s correlation (\\(r\\)) \\(X_1\\) \\(X_2\\) r.x1x2.y: Pearson’s correlation (\\(r\\)) \\(X_1X_2\\) \\(Y\\) - interaction effect important emphasize inputs 2-5 population-level Pearson’s correlation pair variables. true even variables simulation binary. correlations used derive regression coefficients via path tracing rules. Also note effect sizes cross-sectional correlation. contrast one specifies effects experimental manipulations, effects correlation experimental conditions. Pearson’s correlation equivalent effect size \\(\\beta\\) (.e. regression \\(Y \\sim \\beta_0 + X\\beta + \\epsilon\\)) \\(Y\\) \\(X\\) normalized (mean = 0, sd = 1). inputs 2-4, imagine relatively straightforward users identify appropriate values (.e. surveying literature identifying large independent studies effects reported). However, case interaction effect size, r.x1x2.y, users may less used thinking interaction effects correlations. interaction effect size much correlation one two independent variables dependent variable changes conditioned independent variable. much \\(corr(X_1,Y)\\) changes conditioned \\(X_2\\), equivalently much \\(corr(X_2,Y)\\) changes conditioned \\(X_1\\). common way thinking interaction effect sizes plot data “simple slopes”. simple slopes plot shows correlation one independent variables (e.g. \\(X_1\\)) dependent variable (\\(Y\\)) different subsets data, subset defined value second independent variable (e.g. \\(X_2\\)). example, can plot \\(Y \\sim X_1\\) separately participants \\(X_2\\) value lower-half distribution upper-half distribution.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"simulating-single-data-sets","dir":"Articles","previous_headings":"Effect sizes","what":"Simulating single data sets","title":"The InteractionPoweR Package","text":"facilitate user’s understanding interaction effect sizes, InteractionPoweR includes functions simulating single data sets plotting interaction simple slopes plot: function generate_interaction() simulates single data set: data can plotted using plot_interaction() function:  function test_interaction() provides easy access results interaction regression, adjusted \\(R^2\\) interaction term, 95% confidence interval interaction term, shape interaction (crossover.point = value \\(X_1\\) \\(X_2\\) simple-slopes intersect, shape = shape interaction, >1 = cross-, 1 = knock-, <1 = attenuated), simple slopes \\(X_2\\), correlation variables:","code":"set.seed(2020) library(InteractionPoweR) example_data = generate_interaction(N = 350,        # sample size                                     r.x1.y = .2,    # correlation between x1 and y                                     r.x2.y =  .1,   # correlation between x2 and y                                     r.x1.x2 = .2,   # correlation between x1 and x2                                     r.x1x2.y = .15  # correlation between x1x2 and y                                       ) plot_interaction(data = example_data, # simulated data                  q = 2                # number of simple slopes                  ) test_interaction(data = example_data, # simulated data                  q = 2                # number of simple slopes                  ) ## $linear.model ##       Estimate Std. Error  t value     Pr(>|t|) ## x1   0.1888967 0.05153863 3.665148 2.859696e-04 ## x2   0.1356407 0.05165265 2.626016 9.022851e-03 ## x1x2 0.2129386 0.05001033 4.257892 2.661829e-05"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"a-simple-power-analysis","dir":"Articles","previous_headings":"","what":"A simple power analysis","title":"The InteractionPoweR Package","text":"simplest power analysis can run one parameters already known. correlations known, sample size known, interaction effect size known. additionally specify alpha, p-value ’re using (0.05 default). can compute power analytically using power_interaction_r2() function. find analysis 80% power (pwr), interaction shape 0.75 (interaction effect x1x2 75% magnitude x1 - interaction attenuated effect simple-slope lines direction). can also use function power_interaction compute power via monte-carlo simulation. Additional parameters include n.iter, number simulations run. example ’ll use just 1,000 simulations, recommend using 10,000 stable results. find analysis 80% power (pwr).","code":"power_interaction_r2(                   alpha = 0.05,   # p-value                   N = 350,        # sample size                   r.x1.y = .2,    # correlation between x1 and y                   r.x2.y =  .1,   # correlation between x2 and y                   r.x1.x2 = .2,   # correlation between x1 and x2                   r.x1x2.y = .15) # correlation between x1x2 and y ##         pwr ## 1 0.8131373 set.seed(290115) power_interaction(n.iter = 1000,  # number of simulations                   alpha = 0.05,   # p-value                   N = 350,        # sample size                   r.x1.y = .2,    # correlation between x1 and y                   r.x2.y =  .1,   # correlation between x2 and y                   r.x1.x2 = .2,   # correlation between x1 and x2                   r.x1x2.y = .15) # correlation between x1x2 and y ## Warning: executing %dopar% sequentially: no parallel backend registered ##     N   pwr ## 1 350 0.805"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"exploring-the-parameter-space","dir":"Articles","previous_headings":"","what":"Exploring the parameter space","title":"The InteractionPoweR Package","text":"Typically variables known power analysis. example, know magnitude interaction effect ’re interested , want learn sample size needed detect effect 90% power. sample already, want learn smallest effect can detect 90% power. answer questions, user simply needs provide range parameters like analysis use. Almost input parameters can ranges, power_interaction runs n.iter simulations every combination input parameters. number input parameters increase, total number simulations. reduce amount time analysis takes, power_interaction() supports running simulations parallel. number cores used parallel simulation indicated cl flag (recommend number 4 - 6 personal computers).","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"finding-the-optimal-sample-size","dir":"Articles","previous_headings":"Exploring the parameter space","what":"Finding the optimal sample size","title":"The InteractionPoweR Package","text":"example, explore multiple sample sizes can set N = seq(200,600,= 50), runs simulation N = 200, 250, 300 etc, N=500. Equivalently, also set N  = c(200,250,300,350,400,450,500,550,600), former faster write. can plot results using function plot_power_curve():  eye-balling plot, can see N=450 yields approximately 90% power, N=330 yields approximately 80% power. Since fast compute analytic power, can re-run analysis restricted range get exact N. achieve 90% power N=460. case using simulations, running lot simulations computationally quite expensive. function power_estimate() can thus used obtain precise answer haven’t sampled parameter space densely. function fits regression model power results estimate specific power achieved. 9 samples parameter space, can estimate nee N=453 achieve 90% power, isn’t far .","code":"power_test = power_interaction_r2(                   alpha = 0.05,                  # p-value                   N = seq(200,600,by = 10),      # sample size                   r.x1.y = .2,                   # correlation between x1 and y                   r.x2.y =  .1,                  # correlation between x2 and y                   r.x1.x2 = .2,                  # correlation between x1 and x2                   r.x1x2.y = .15)                # correlation between x1x2 and y                   power_test ##      N       pwr ## 1  200 0.5724275 ## 2  210 0.5935829 ## 3  220 0.6139697 ## 4  230 0.6335895 ## 5  240 0.6524470 ## 6  250 0.6705498 ## 7  260 0.6879081 ## 8  270 0.7045340 ## 9  280 0.7204417 ## 10 290 0.7356468 ## 11 300 0.7501662 ## 12 310 0.7640182 ## 13 320 0.7772214 ## 14 330 0.7897955 ## 15 340 0.8017607 ## 16 350 0.8131373 ## 17 360 0.8239461 ## 18 370 0.8342077 ## 19 380 0.8439429 ## 20 390 0.8531723 ## 21 400 0.8619163 ## 22 410 0.8701952 ## 23 420 0.8780286 ## 24 430 0.8854362 ## 25 440 0.8924369 ## 26 450 0.8990493 ## 27 460 0.9052915 ## 28 470 0.9111809 ## 29 480 0.9167346 ## 30 490 0.9219691 ## 31 500 0.9269002 ## 32 510 0.9315434 ## 33 520 0.9359132 ## 34 530 0.9400240 ## 35 540 0.9438894 ## 36 550 0.9475223 ## 37 560 0.9509354 ## 38 570 0.9541406 ## 39 580 0.9571493 ## 40 590 0.9599725 ## 41 600 0.9626206 plot_power_curve(power_data = power_test, # output from power_interaction()                  power_target = .9,        # the power we want to achieve                   x = \"N\" # x variable                  ) power_test = power_interaction_r2(                   alpha = 0.05,                  # p-value                   N = seq(450,470,by = 1),      # sample size                   r.x1.y = .2,                   # correlation between x1 and y                   r.x2.y =  .1,                  # correlation between x2 and y                   r.x1.x2 = .2,                  # correlation between x1 and x2                   r.x1x2.y = .15)                # correlation between x1x2 and y                   power_test ##      N       pwr ## 1  450 0.8990493 ## 2  451 0.8996899 ## 3  452 0.9003268 ## 4  453 0.9009600 ## 5  454 0.9015896 ## 6  455 0.9022156 ## 7  456 0.9028379 ## 8  457 0.9034566 ## 9  458 0.9040718 ## 10 459 0.9046834 ## 11 460 0.9052915 ## 12 461 0.9058960 ## 13 462 0.9064970 ## 14 463 0.9070945 ## 15 464 0.9076886 ## 16 465 0.9082792 ## 17 466 0.9088663 ## 18 467 0.9094501 ## 19 468 0.9100304 ## 20 469 0.9106073 ## 21 470 0.9111809 power_test = power_interaction_r2(                   alpha = 0.05,                  # p-value                   N = seq(200,600,by = 50),      # sample size                   r.x1.y = .2,                   # correlation between x1 and y                   r.x2.y =  .1,                  # correlation between x2 and y                   r.x1.x2 = .2,                  # correlation between x1 and x2                   r.x1x2.y = .15)                # correlation between x1x2 and y                   power_estimate(power_data = power_test, # output from power_interaction()                         x = \"N\",        # the variable we want a precise number for              power_target = 0.9         # the power we want to achieve  ) ## [1] 445.3621"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"finding-the-smallest-detectable-effect-size","dir":"Articles","previous_headings":"Exploring the parameter space","what":"Finding the smallest detectable effect size","title":"The InteractionPoweR Package","text":"Another common use-case sample size variables--interest known, want know small interaction effect can detected certain power level. can repeat steps , except time r.x1x2.y range values.  see approximately 90% power detect effects small r.x1x2.y = 0.1725. cases may also useful take look distribution simple slopes across range parameters tested. run analysis simulation use detailed_results=T, can look distribution effect sizes simple slopes.  can learn range slopes consistent smallest effect powered detect, r.x1x2.y=0.17, quite large. particular, note lower slope negative, 0, even fairly large positive direction - consistent r.x1x2.y=0.17. See section Detailed Results information outputs detailed.results = TRUE.","code":"power_test = power_interaction_r2(                   alpha = 0.05,                  # p-value                   N = 350                ,       # sample size                   r.x1.y = .2,                   # correlation between x1 and y                   r.x2.y =  .1,                  # correlation between x2 and y                   r.x1.x2 = .2,                  # correlation between x1 and x2                   r.x1x2.y = seq(.1,.2,by=.005))  # correlation between x1x2 and y                    power_test ##    r.x1x2.y       pwr ## 1     0.100 0.4760123 ## 2     0.105 0.5138689 ## 3     0.110 0.5516069 ## 4     0.115 0.5888872 ## 5     0.120 0.6253837 ## 6     0.125 0.6607914 ## 7     0.130 0.6948340 ## 8     0.135 0.7272701 ## 9     0.140 0.7578978 ## 10    0.145 0.7865584 ## 11    0.150 0.8131373 ## 12    0.155 0.8375646 ## 13    0.160 0.8598129 ## 14    0.165 0.8798947 ## 15    0.170 0.8978583 ## 16    0.175 0.9137828 ## 17    0.180 0.9277732 ## 18    0.185 0.9399539 ## 19    0.190 0.9504639 ## 20    0.195 0.9594509 ## 21    0.200 0.9670667 plot_power_curve(power_data = power_test, # output from power_interaction()                  power_target = .9        # the power we want to achieve                   ) set.seed(316834) power_test = power_interaction(n.iter = 1000,    # number of simulations                   alpha = 0.05,                  # p-value                   N = 350                ,       # sample size                   r.x1.y = .2,                   # correlation between x1 and y                   r.x2.y =  .1,                  # correlation between x2 and y                   r.x1.x2 = .2,                  # correlation between x1 and x2                   r.x1x2.y = seq(.1,.2,by=.01),   # correlation between x1x2 and y                   cl = 2,                         # number of clusters for parallel analyses                   detailed_results = T           # detailed results                 ) ## Performing 11000 simulations plot_simple_slope(power_data = power_test)"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"varying-multiple-parameters","dir":"Articles","previous_headings":"Exploring the parameter space","what":"Varying multiple parameters","title":"The InteractionPoweR Package","text":"uncommon multiple parameters simulation unknown. find power every combination parameters, simply input range values every unknown parameter simulation. generally recommend vary 3 parameters time, can difficult parse results (simulations can take long time run). example, lets say ’s range plausible effect sizes interaction, want know large sample need detect . test , can vary N r.x1x2.y:  ’ve learned , depending exactly effect size ’re aiming , ’ll need N 260 450.","code":"power_test = power_interaction_r2(                   alpha = 0.05,                   # p-value                   N = seq(100,600,by = 10),       # sample size                   r.x1.y = .2,                    # correlation between x1 and y                   r.x2.y = .1,                    # correlation between x2 and y                   r.x1.x2 = .2       ,            # correlation between x1 and x2                   r.x1x2.y = seq(.15,.2,by=.005), # correlation between x1x2 and y                   detailed_results = T)  plot_power_curve(power_data = power_test, # output from power_interaction()                  power_target = .9,       # the power we want to achieve                   x = \"N\",                 # x-axis                  group = \"r.x1x2.y\"       # grouping variable                  ) power_estimate(power_data = power_test %>% dplyr::select(c(\"N\",\"r.x1x2.y\",\"pwr\")), # select the variables used for the estimate                         x = \"N\",        # the variable we want a precise number for              power_target = 0.9         # the power we want to achieve  ) ##    r.x1x2.y estimate ## 1     0.150 440.7966 ## 2     0.155 412.6445 ## 3     0.160 387.7582 ## 4     0.165 365.0462 ## 5     0.170 344.5132 ## 6     0.175 325.8309 ## 7     0.180 308.7349 ## 8     0.185 293.3426 ## 9     0.190 278.8560 ## 10    0.195 265.4087 ## 11    0.200 253.3799"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"why-correlations-are-important","dir":"Articles","previous_headings":"Exploring the parameter space","what":"Why correlations are important","title":"The InteractionPoweR Package","text":"Users may wonder package requires many effect sizes correlations. simple example, magnitude correlation x1 x2, well main effects, jointly influence power, somewhat surprising ways.  line shows power varies depending correlation x1 x2. effect also depends main effects x1 x2. Thus, ignoring correlations result inaccurate power calculation.","code":"power_test = power_interaction_r2(                   alpha = 0.05,                   # p-value                   N = 600,                       # sample size                   r.x1.y = c(-.3,0,.3),                    # correlation between x1 and y                   r.x2.y = round(seq(-.3,.3,.05),2),                    # correlation between x2 and y                   r.x1.x2 = seq(-.8,.8,.05),        # correlation between x1 and x2                   r.x1x2.y = .1,                  # correlation between x1x2 and y                   detailed_results = T)  plot_power_curve(power_data = power_test, # output from power_interaction()                  power_target = .8,       # the power we want to achieve                   x = \"r.x1.x2\",                  group = \"r.x2.y\",                  facets =  \"r.x1.y\"                            )"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"reliability","dir":"Articles","previous_headings":"","what":"Reliability","title":"The InteractionPoweR Package","text":"Reliability important issue statistics. Even effects large, measurements unreliable, ’ll -powered. especially true interactions, reliability \\(X_1\\) \\(X_2\\) influence power, well reliability \\(Y\\). context InteractionPoweR, “reliability” means proportion variance variable attributable true signal, opposed measurement error. reliability ‘1’ (default), means variables measured error (reliability must greater 0, less equal 1). Common statistics reflect reliability include test-retest reliability, inter-rater reliability, Cronbach’s alpha. flags rel.x1, rel.x2, rel.y control reliability simulated variable. recommend exploring much reliability affect power. example:  plots make clear large effect reliability results. simulation, even reliability “acceptable” “good” (reliability = 0.8), enough bring power , 0.9 0.636!","code":"power_test = power_interaction_r2(                   alpha = 0.05,                   # p-value                   N = 450,                        # sample size                   r.x1.y = .2,                    # correlation between x1 and y                   r.x2.y = .1,                    # correlation between x2 and y                   r.x1.x2 = .2,                   # correlation between x1 and x2                   r.x1x2.y = .15,                 # correlation between x1x2 and y                   rel.x1 =  seq(.2,1,by=.1),      # x1 reliability                       rel.x2 =  seq(.2,1,by=.1),      # x2 reliability                             rel.y  =  seq(.2,1,by=.2))      # y reliability            plot_power_curve(power_data = power_test, # output from power_interaction()                  power_target = .9,       # the power we want to achieve                   x     = \"rel.x1\",        # x-axis                  group = \"rel.x2\",        # grouping variable                  facets= \"rel.y\"          # facets variable                  )"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"binaryordinal-variables","dir":"Articles","previous_headings":"","what":"Binary/ordinal variables","title":"The InteractionPoweR Package","text":"power_interaction_r2() assumes variables continuous, normal distribution. power_interaction() simulates variables continuous normal. However, variables can transformed binary/ordinal (e.g., 5 discrete levels, though value 20 possible). Typically, continuous normal variable transformed binary/ordinal, correlations variable variables reduced altered. Sometimes, makes sense happen power analysis. example, say variable continuous literature, effect sizes power analysis drawn prior work continuous variable, analysis ’ve chosen dichotomize variable measure trait ordinal scale. case, reduction correlations makes sense, accurately reflects data analysis power . hand, say variable binary (least literature), maybe ’re looking sex diagnosis disorder. case, input correlations correlations binary/ordinal variable, don’t want reduced altered. power_interaction() distinguishes cases adjust.correlations flag. default adjust.correlations = TRUE. indicates input correlations binary/ordinal variables. circumvent problem variable transformations altering correlations, power_interaction() runs function compute much input correlations need adjusted final output variables correlation structure specified user. adjust.correlations = FALSE, function run, allowing user see impact variable transformations correlation structure, power. flags k.x1, k.x2, k.y control number discrete values variable takes (.e., k.x1 =2 means x1 binary variable, k.x2 = 5 means x2 ordinal-variable).","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"binary","dir":"Articles","previous_headings":"Binary/ordinal variables","what":"Binary","title":"The InteractionPoweR Package","text":"’s single data set x1, x2, y binary. Note \\(Y\\) binary, analysis run logistic regression.","code":"test_data = generate_interaction(                   N = 450,                        # sample size                   r.x1.y = .2,                    # correlation between x1 and y                   r.x2.y = .1,                    # correlation between x2 and y                   r.x1.x2 = .2,                   # correlation between x1 and x2                   r.x1x2.y = .15,                 # correlation between x1x2 and y                   k.x1 = 2,                       # x1 is binary                   k.x2 = 2,                       # x2 is binary                   k.y = 2,                        # y is binary                   adjust.correlations = TRUE)     # Adjust correlations?    plot_interaction(data =test_data )"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"ordinal","dir":"Articles","previous_headings":"Binary/ordinal variables","what":"ordinal","title":"The InteractionPoweR Package","text":"’s example showing effects artificially discretizing x1 power. see power lower fewer discrete values.","code":"power_test = power_interaction(                   n.iter=1000,                   N = 450,                        # sample size                   r.x1.y = .2,                    # correlation between x1 and y                   r.x2.y = .1,                    # correlation between x2 and y                   r.x1.x2 = .2,                   # correlation between x1 and x2                   r.x1x2.y = .15,                 # correlation between x1x2 and y                   k.x1 = c(2,3,4,6,8),             # x1 has 2-10 discrete values                   adjust.correlations = FALSE)    # Adjust correlations?    plot_power_curve(power_test,power_target = .9)"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"detailed-and-full-results","dir":"Articles","previous_headings":"","what":"Detailed and full results","title":"The InteractionPoweR Package","text":"Beyond power range simple slopes, power_interaction() power_interaction_r2() generate lot additional information simulations. can optionally returned using detailed_results = TRUE full_simulation = TRUE (power_interaction() ). default, flags FALSE. detailed_results returns additional information unique setting combination, including mean correlation structure simulated variables across niter simulations, mean regression coefficients. full_simulation, name suggests, returns output test_interaction() every single simulated data set power_interaction() generates. output can quite large (.e. 10,000 simulations run, 10,000 rows).","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"detailed-results","dir":"Articles","previous_headings":"Detailed and full results","what":"Detailed results","title":"The InteractionPoweR Package","text":"Let’s return example examining range interaction effect sizes, except now detailed_results = TRUE. yields lot information simulated data looked like, average. ? first two columns standard output, setting varied across simulations, power. Next x1_pwr1 x2_pwr. power detect effect x1 x2 interaction model. x1x2_est_mean x1x2_r2_mean mean effect size (\\(B_3\\)) mean change adjusted \\(R^2\\) (pseudo-\\(R^2\\) \\(Y\\) binary) interaction term \\(X_1X_2\\) added model. crossover shape value \\(X_1\\) \\(X_2\\) simple slopes intersect, shape interaction (\\(B_3 / B_1\\)), reflects whether knock-, attenuated, crossover interaction. also give mean upper lower bounds 95% confidence interval shape crossover. example, one interesting insight can gain even though n=50 76% power analysis, observed shape vary widely. confidence interval indicates even likely observe significant effects interaction opposite shape anticipated. fact, don’t see 95% simulations yielding shape consistent hypothesis r.x1x2.y > r.x1.y, N=200, 99.99% power! Next min.lwr, min.upr, max.lwr, max.upr. reflect range simple-slopes observed simulations interaction significant. default, number simple slopes (q) 2 (.e. 50/50 split), \\(X_2\\) variable conditioned . ranges reflect majority lower simple slope ranges -0.05 .2, upper simple slope ranges .2 .45. proportion simple slopes reflected ranges can controlled IQR flag. default value IQR 1.5, means output ranges median lower upper simple slope, +/- 1.5 IQRs (IQR 75th percentile - 25th percentile). output intended give insight effect sizes detected simulation. x1x2_95_CI_2.5_mean x1x2_95_CI_97.5_mean mean lower upper 95% confidence intervals interaction term, x1x2_95_CI_width_mean mean width confidence interval. Similarly, r_y_x1x2_q_2.5, r_y_x1x2_q_50.0, r_y_x1x2_q_97.5 quantiles (2.5%, 50%, 97.5%) correlation \\(Y\\) \\(X_1X_2\\) interaction significant. x1_est_mean x2_est_mean mean main effects \\(X_1\\) \\(X_2\\), pwr_x1 pwr_x2 power detect main effects, context full interaction regression.","code":"power_test = power_interaction(n.iter = 1000,    # number of simulations                   alpha = 0.05,                  # p-value                   N = seq(50,200,50)  ,          # sample size                   r.x1.y = .2,                   # correlation between x1 and y                   r.x2.y =  .1,                  # correlation between x2 and y                   r.x1.x2 = .2,                  # correlation between x1 and x2                   r.x1x2.y = .4,                 # correlation between x1x2 and y                   detailed_results = TRUE        # return detailed results                           ) power_test ##     N   pwr x1_pwr x2_pwr x1x2_est_mean x1x2_r2_mean crossover_mean shape_mean ## 1  50 0.780  0.277  0.079     0.4426144    0.1763593     -0.1539197   3.210472 ## 2 100 0.979  0.509  0.100     0.3955305    0.1523973     -0.1629060   2.961055 ## 3 150 0.998  0.695  0.135     0.3910607    0.1526577     -0.1656292   3.206382 ## 4 200 0.998  0.823  0.155     0.3936075    0.1546993     -0.1607875   2.736218 ##   shape_q_2.5 shape_q_97.5 crossover_q_2.5 crossover_q_97.5    min.lwr ## 1 -20.6471929    20.103591      -0.8424624        0.4985743 -0.5779247 ## 2   0.6913046    11.439831      -0.7250498        0.3597690 -0.4340121 ## 3   0.9342058     7.868203      -0.6388662        0.2561451 -0.3734257 ## 4   1.0795667     6.020076      -0.5102325        0.1646625 -0.3482832 ##     min.upr   max.lwr   max.upr x1x2_95_CI_2.5_mean x1x2_95_CI_97.5_mean ## 1 0.2391543 0.1499189 0.9550447           0.1730314            0.7121974 ## 2 0.1677606 0.2346053 0.7952463           0.2112746            0.5797864 ## 3 0.1279905 0.2774962 0.7592573           0.2442872            0.5378341 ## 4 0.1071991 0.3042969 0.7259304           0.2672668            0.5199481 ##   x1x2_95_CI_width_mean r_y_x1x2_q_2.5 r_y_x1x2_q_50.0 r_y_x1x2_q_97.5 ## 1             0.5391660      0.2404203       0.4415142       0.6305032 ## 2             0.3685118      0.2190781       0.4014453       0.5758182 ## 3             0.2935468      0.2375604       0.3996108       0.5472230 ## 4             0.2526813      0.2658015       0.3986438       0.5217490 ##   x1_est_mean x2_est_mean r_x1_y_mean r_x2_y_mean r_x1_x2_mean r_y_x1x2_mean ## 1   0.1922320  0.06429109   0.1969611  0.10240447    0.2083746     0.4360222 ## 2   0.1877368  0.06183341   0.1938392  0.09652172    0.1993411     0.3960011 ## 3   0.1915144  0.06219301   0.2028635  0.10097609    0.1989817     0.3964685 ## 4   0.1909169  0.06193294   0.2005727  0.09768533    0.1993219     0.3961706 ##   r_x1_x1x2_mean r_x2_x1x2_mean ## 1  -1.058919e-02   -0.002177245 ## 2  -8.850879e-03   -0.002288713 ## 3   7.677160e-06    0.003463617 ## 4  -4.323312e-03   -0.003413765"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweRvignette.html","id":"full-results","dir":"Articles","previous_headings":"Detailed and full results","what":"Full results","title":"The InteractionPoweR Package","text":"full_results can useful one wants better grasp goes power analysis. return first example, can see range sample-level correlations one can expect see, given population-level correlation: \\(B_3\\) significant (sig_int == 1), 95% observed sample-level correlations range 0.1 0.25, even though population-level correlation 0.15! Also note half observed significant effect sizes greater 0.15, even though median effects 0.15. post-hoc power-analyses using observed effect-sizes sample typically great idea. choice run power analysis conditioned result significant, ’ve effectively subjected publication bias, result power analysis tend yield inflated estimate power.","code":"set.seed(942141) power_test = power_interaction(n.iter = 1000,  # number of simulations                   alpha = 0.05,   # p-value                   N = 350,        # sample size                   r.x1.y = .2,    # correlation between x1 and y                   r.x2.y =  .1,   # correlation between x2 and y                   r.x1.x2 = .2,   # correlation between x1 and x2                   r.x1x2.y = .15, # correlation between x1x2 and y                   full_simulation = T, # return the full simulation results                        detailed_results = T # get detailed results, including correlations                    ) # the standard output: power_test$results ##     N   pwr x1_pwr x2_pwr x1x2_est_mean x1x2_r2_mean crossover_mean shape_mean ## 1 350 0.808  0.949  0.207     0.1652355   0.02668037     -0.3782685  0.9575423 ##   shape_q_2.5 shape_q_97.5 crossover_q_2.5 crossover_q_97.5    min.lwr ## 1   0.4320577     1.978912        -1.19942        0.3104526 -0.0780142 ##     min.upr   max.lwr   max.upr x1x2_95_CI_2.5_mean x1x2_95_CI_97.5_mean ## 1 0.2031697 0.1853961 0.4726258          0.06420129            0.2662696 ##   x1x2_95_CI_width_mean r_y_x1x2_q_2.5 r_y_x1x2_q_50.0 r_y_x1x2_q_97.5 ## 1             0.2020683     0.09287497       0.1652633        0.258831 ##   x1_est_mean x2_est_mean r_x1_y_mean r_x2_y_mean r_x1_x2_mean r_y_x1x2_mean ## 1   0.1916138  0.05885155    0.202843  0.09743667    0.2009862     0.1675586 ##   r_x1_x1x2_mean r_x2_x1x2_mean ## 1   -0.001093734    0.002505613 # range of correlations when the test is significant  quants = c(0,.025,.25,.5,.75,.975,1) #quantiles  power_test$simulation %>%    dplyr::filter(sig_int ==1 ) %>%  # only significant results   dplyr::summarise(prob = quants,                    qs = stats::quantile(r_y_x1x2,quants)) ## Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in ## dplyr 1.1.0. ## ℹ Please use `reframe()` instead. ## ℹ When switching from `summarise()` to `reframe()`, remember that `reframe()` ##   always returns an ungrouped data frame and adjust accordingly. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ##    prob         qs ## 1 0.000 0.05200316 ## 2 0.025 0.09287497 ## 3 0.250 0.13391873 ## 4 0.500 0.16526331 ## 5 0.750 0.19832108 ## 6 0.975 0.25883097 ## 7 1.000 0.30228835"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR_Stability.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"InteractionPoweR Stability Update","text":"Standard power analysis tells us whether likely detect effect, provide easily accessible benchmarks reflective sample estimate true effect across repeated samples. high risk small interaction effects highly variable estimates across samples. Stability analysis addresses issue asking different question: “sample size can trust estimate consistently approximate true interaction effect?” Stability operationalized using two key concepts: Corridor Stability (COS): symmetric interval around expected interaction effect. Estimates falling inside COS regarded stable. Point Stability (POS): sample size desired proportion estimates (e.g., 80%, 90%, 95%) fall within COS. identifying POS, researchers can plan just detection effect, accurate, reliable estimation. vignette describes use run_pos_power_search() evaluate stability two-way interaction terms form: \\[ Y \\sim \\beta_0 + X_1\\beta_1 + X_2\\beta_2 + (X_1X_2)\\beta_3 + \\epsilon \\] \\(X_1\\) \\(X_2\\) independent variables, \\(X_1X_2\\) represents interaction.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR_Stability.html","id":"stability-criteria","dir":"Articles","previous_headings":"","what":"Stability Criteria","title":"InteractionPoweR Stability Update","text":"COS POS defined follows: \\(cos.width\\): width Corridor Stability (COS), expressed proportion expected population interaction effect size (\\(r_{x1x2,y}\\)). example, cos.width = 0.5 means COS spans \\(\\pm 50\\%\\) expected effect. \\(pos.percent\\): minimum proportion simulated estimates required fall within COS sample size considered stable. Typical choices 0.80, 0.90, 0.95.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR_Stability.html","id":"key-parameters","dir":"Articles","previous_headings":"","what":"Key Parameters","title":"InteractionPoweR Stability Update","text":"Use run_pos_power_search() function requires minimum 5 input variables: r.x1.y: Pearson’s correlation (\\(r\\)) \\(X_1\\) \\(Y\\) r.x2.y: Pearson’s correlation (\\(r\\)) \\(X_2\\) \\(Y\\) r.x1.x2: Pearson’s correlation (\\(r\\)) \\(X_1\\) \\(X_2\\) rel.x1: Reliability x1 (e.g. test-retest reliability, ICC, Cronbach’s alpha). rel.x2: Reliability x2 (e.g. test-retest reliability, ICC, Cronbach’s alpha). multiple optional inputs change output function perform specific tasks, depending goal user. r.x1x2.y: Pearson’s correlation (\\(r\\)) \\(X_1X_2\\) \\(Y\\) - interaction effect. rel.y: reliability xy (e.g. test-retest reliability, ICC, Cronbach’s alpha). single.N single sample size stability estimate calculated. step: amount rounding applied search sample size estimate POS. start.power: statistical power used determine starting sample size search POS. n.datasets number simulations conducted sample size identified search process. lower.bound smallest sample size search progress POS located. upper.bound largest sample size search progress POS located. cos.width width corridor stability (COS) pos.percent percentage estimates required fall within COS qualify estimates stable n.cores optional parallel processing.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR_Stability.html","id":"use-cases","dir":"Articles","previous_headings":"","what":"Use Cases","title":"InteractionPoweR Stability Update","text":"two main use cases: Evaluating stability specific sample size (single.N) function returns percentage estimates falling inside COS, sign error rate, necessary effect size stability, associated power. Searching minimum stable sample size (POS) single.N NULL, function conducts binary search find smallest sample size satisfying stability criterion. Internally, function simulates multiple datasets tested sample size, fits interaction model, assesses whether estimated \\(\\beta_3\\) falls inside COS.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR_Stability.html","id":"interpreting-the-results","dir":"Articles","previous_headings":"","what":"Interpreting the Results","title":"InteractionPoweR Stability Update","text":"output run_pos_power_search() structured help researchers assess precision sign consistency interaction estimates: COS_interval: range around expected interaction effect defined cos.width. 80% estimates fall inside interval, sample size considered produce stable estimates. within_COS_interval: proportion estimates within inputted COS sample size single.N. POS_determined_COS: COS width needed enclose specified proportion (pos.percent) estimates given input single.N. within_POS_determined_COS: percentage estimates within COS sample size. user specified, pos.percent. POS_determined_COS.percent: percentage deviation expected effect reflected POS_determined_COS. r.x1x2.y_to_be_stable_at_single.N: minimum interaction effect size need exist achieve desired stability given sample size. sign_error_rate: Proportion estimates whose sign differs expected sign. High sign error rate indicates instability, even power adequate. power: statistical power detect interaction effect sample size. power_to_be_stable: power required meet stability criteria current parameters. general: within_COS_interval low sign_error_rate high, estimate unreliable given sample size. r.x1x2.y_to_be_stable_at_single.N much larger input effect, chosen single.N insufficient stable estimation. lower POS_samplesize, replicable interaction estimate likely signal stronger /noise obscuring signal weaker.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR_Stability.html","id":"when-to-modify-each-parameter","dir":"Articles","previous_headings":"","what":"When to Modify Each Parameter","title":"InteractionPoweR Stability Update","text":"common parameters used run_pos_power_search() guidance change . r.x1.y, r.x2.y: Correlations X1 X2 Y.Use prior estimates pilot data. required. r.x1.x2: Correlation predictors X1 X2.Adjust reflect multicollinearity. High values increase required sample size. rel.x1, rel.x2: Reliability predictors.Use test-retest internal consistency estimates (e.g., Cronbach’s alpha). Required. rel.y: Reliability outcome variable.Usually 1 simulated data; lower values modeling real outcomes. r.x1x2.y: Correlation interaction term Y.Use literature estimates pilot data. provided, imputed. single.N: Sample size evaluate stability fixed N.Use evaluating specific study design planning pilot. start.power: Desired starting power (e.g., 0.80).Used find power-equivalent sample size stability analysis. step: Rounding increment sample size search.Larger steps make search faster less precise. n.datasets: Number simulations per step.Use 1000+ precise estimates; reduce faster exploratory runs. lower.bound, upper.bound: Range sample sizes search.Set control search bounds manually, let function define . cos.width: Width Corridor Stability.Smaller values demand tighter estimates. Try 0.25, 0.5, 1.0. pos.percent: Target proportion estimates within COS.Typically set 0.8, 0.9, 0.95 depending tolerance estimate noise. n.cores: Number parallel processing cores.Use multiple cores speed simulation. E.g., 4 6.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR_Stability.html","id":"example-evaluating-stability-at-n-100-","dir":"Articles","previous_headings":"","what":"Example: Evaluating Stability at N = 100.","title":"InteractionPoweR Stability Update","text":"demonstrate use, evaluate stability sample size N = 100 first. output indicates N = 100, ~47.3% estimates fall within specified COS 50% around expected interaction effect (0.1203, 0.15 attenuation), suggesting sample size insufficient stable estimation. COS required achieve desired 80% stability rate spans much wider range ([-0.007, 0.2477]). minimum effect size required stability N = 100 0.314 attenuation, twice observed interaction, associated power needed level stability approximately 0.72. sign error rate 11.9% observed single.N (100).","code":"set.seed(1) library(InteractionPoweR) run_pos_power_search(   r.x1.y = 0.2,   r.x2.y = 0.2,   r.x1x2.y = 0.15,   r.x1.x2 = 0.1,   rel.x1 = 0.8,   rel.x2 = 0.8,   rel.y = 1,   single.N = 100,   n.datasets = 1000,   cos.width = 0.5,   pos.percent = 0.8,   n.cores = 1 ) ##   single.N rel.x1 rel.x2  rel.x1x2 rel.y r.x1x2.y r.x1.y r.x2.y r.x1.x2 ## 1      100    0.8    0.8 0.6435644     1     0.15    0.2    0.2     0.1 ##   obs.r.x1x2.y COS_pos.percents     COS_interval within_COS_interval ## 1    0.1203337         (50, 80) [0.0602, 0.1805]               0.476 ##   POS_determined_COS within_POS_determined_COS POS_determined_COS.percent ## 1   [-0.013, 0.2536]                       0.8                     110.77 ##   sign_error_rate     power r.x1x2.y_to_be_stable_at_single.N ## 1           0.128 0.2273492                         0.2995293 ##   power_to_be_stable ## 1           0.675739"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR_Stability.html","id":"interpreting-the-results-1","dir":"Articles","previous_headings":"","what":"Interpreting the Results","title":"InteractionPoweR Stability Update","text":"output run_pos_power_search() structured help researchers assess precision sign consistency interaction estimates: COS_interval: range around expected interaction effect defined cos.width. 80% estimates fall inside interval, sample size considered produce stable estimates. within_COS_interval: proportion estimates within inputted COS sample size single.N. POS_determined_COS: COS width required pos.percent estimates COS sample size single.N. within_POS_determined_COS: percentage estimates within COS sample size. user specified, pos.percent. POS_determined_COS.percent: percentage deviation expected effect reflected POS_determined_COS. sign_error_rate: number estimates signed incorrectly sample size single.N (100). power: statistical power detect interaction effect sample size r.x1x2.y_to_be_stable_at_single.N: minimum interaction effect size required stability sample size single.N (100). power_to_be_stable: statistical power required interaction, inputted, stable. #Interpreting Results output run_pos_power_search() structured help researchers assess precision sign consistency interaction estimates: COS_interval: range around expected interaction effect defined cos.width. 80% estimates fall inside interval, estimate considered stable. within_COS_interval: Proportion estimates falling within predefined COS. sign_error_rate: Proportion estimates whose sign differs expected sign. High sign error rate indicates instability, even power adequate. POS_determined_COS: COS width needed enclose specified proportion (pos.percent) estimates. r.x1x2.y_to_be_stable_at_single.N: minimum interaction effect size need exist achieve desired stability given sample size. power: Probability detecting non-zero interaction given current inputs. power_to_be_stable: power required meet stability criteria current parameters. general: within_COS_interval low sign_error_rate high, estimate unreliable given sample size. r.x1x2.y_to_be_stable_at_single.N much larger input effect, chosen N insufficient stable estimation. lower POS_samplesize, efficient design—reliability correlations justify .","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR_Stability.html","id":"example-finding-the-minimum-stable-sample-size-pos","dir":"Articles","previous_headings":"","what":"Example: Finding the Minimum Stable Sample Size (POS)","title":"InteractionPoweR Stability Update","text":"run performs binary search find smallest N 80% estimates fall within \\(\\pm 50\\%\\) expected interaction effect size. output shows sample size approximately 435 required 80% simulated estimates fall within 50% expected interaction effect (0.1203, 0.15 attenuation). sample size, COS interval ranges 0.0602 0.1805, power detect interaction effect approximately 0.73. suggests interaction small, can estimated acceptable stability N = 435.","code":"set.seed(1) x <- run_pos_power_search(   r.x1.y = 0.2,   r.x2.y = 0.2,   r.x1x2.y = 0.15,   r.x1.x2 = 0.1,   rel.x1 = 0.8,   rel.x2 = 0.8,   rel.y = 1,   start.power = 0.7,   n.datasets = 1000,   cos.width = 0.5,   pos.percent = 0.8,   n.cores = 6 ) x ##   rel.x1 rel.x2  rel.x1x2 rel.y r.x1x2.y r.x1.y r.x2.y r.x1.x2 obs.r.x1x2.y ## 1    0.8    0.8 0.6435644     1     0.15    0.2    0.2     0.1    0.1203337 ##   COS_pos.percents     COS_interval POS_samplesize POS_power ## 1         (50, 80) [0.0602, 0.1805]            421 0.7159145"},{"path":"https://dbaranger.github.io/InteractionPoweR/articles/InteractionPoweR_Stability.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"InteractionPoweR Stability Update","text":"function handles automatic assignment r.x1x2.y specified, using average main effects (adjusted reliability) Simulations can conducted parallel using foreach doParallel Results include estimated power, COS bounds, observed estimate variability, stability threshold, can change depending user input. function particularly helpful identifying realistic sample size requirements just detection reliable estimation, especially context small unreliable effects. Refer paper ([link]) theoretical background empirical justification stability-based approaches.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Baranger. Author, maintainer.            davidbaranger.com Andrew Castillo. Author. Brandon Goldstein. Contributor. Megan Finsaas. Contributor. Thomas Olino. Contributor. Colin Vize. Contributor. Don Lynam. Contributor.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baranger DAA, Finsaas MC, Goldstein BL, Vize CE, Lynam DR, Olino TM (2023). “Tutorial: Power analyses interaction effects cross-sectional regressions.” Advances Methods Practices Psychological Science, 6(3). doi:10.1177/25152459231187531.","code":"@Article{,   author = {David A. A. Baranger and Megan C. Finsaas and Brandon L. Goldstein and Colin E. Vize and Donald R. Lynam and Thomas M. Olino},   doi = {10.1177/25152459231187531},   journal = {Advances in Methods and Practices in Psychological Science},   title = {Tutorial: Power analyses for interaction effects in cross-sectional regressions},   volume = {6},   number = {3},   year = {2023}, }"},{"path":"https://dbaranger.github.io/InteractionPoweR/index.html","id":"interactionpower-","dir":"","previous_headings":"","what":"Power Analyses for Interaction Effects in Cross-Sectional Regressions","title":"Power Analyses for Interaction Effects in Cross-Sectional Regressions","text":"InteractionPoweR package conducts power analyses regression models cross-sectional data sets term interest interaction two three variables, also known ‘moderation’ analyses. package includes functions simulating data sets, conducting power analyses, conducting stability analyses, plotting interpreting results. Notable package features include (1) ability compute power interactions two continuous variables, (2) effect sizes specified cross-sectional Pearson’s correlation, (3) simulations assume interacting variables independent, (4) variable model, including outcome, can anywhere 2 (.e., binary) 20 discrete values, (5) analyses can incorporate effects reliability, interacting variables, well outcome variable. Stability analyses two-way interactions continuous variables recently added. include new search function returns sample size interaction effect size results stabilize. information see tutorial paper, package vignette, FAQ. Web apps: Simulation-based power 2-way: Shiny app implements major functions simulation-based power analyses user-friendly point--click interface. Analytic power 2-way: also simpler Shiny app computing analytic power. recommend app particularly beginners users new power analyses. Analytic power 3-way: also recently added new shiny app three-way interactions. Please report bugs, issues, questions Issue Github.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Power Analyses for Interaction Effects in Cross-Sectional Regressions","text":"can install InteractionPoweR CRAN : can also install development version InteractionPoweR github : get error corrupt .rdb file, try restarting R session.","code":"install.packages(\"InteractionPoweR\") install.packages(\"devtools\") devtools::install_github(\"dbaranger/InteractionPoweR\")"},{"path":"https://dbaranger.github.io/InteractionPoweR/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Power Analyses for Interaction Effects in Cross-Sectional Regressions","text":"simplest use-case input parameters known. know population-level correlation predictors (x1 x2) outcome, smallest effect size interest mind interaction effect size, sample size already set (maybe conducting secondary data analysis). Power can determined single command. First - analytic power, using variable correlations (reliability, provided) estimate much additional variance explained interaction term. see 81% power. can also use simulations estimate power. Simulations particularly useful can account non-normal data, including binary likert variables. NB examples use 1000 simulations speed (n.iter = 1000), robust results recommend 10,000 simulations (n.iter = 10000). simulation’s accuracy increase iterations.","code":"library(InteractionPoweR)  test_power<-power_interaction_r2(   alpha = 0.05,             # alpha, for the power analysis   N = 350,                  # sample size   r.x1x2.y = .15,           # interaction effect to test (correlation between x1*x2 and y)   r.x1.y = .2,              # correlation between x1 and y   r.x2.y = .1,              # correlation between x2 and y   r.x1.x2 = .2              # correlation between x1 and x2 )  test_power #>         pwr #> 1 0.8131373 set.seed(2022) test_power<-power_interaction(   n.iter = 10000,            # number of simulations per unique combination of input parameters   alpha = 0.05,             # alpha, for the power analysis   N = 350,                  # sample size   r.x1x2.y = .15,           # interaction effect to test (correlation between x1*x2 and y)   r.x1.y = .2,              # correlation between x1 and y   r.x2.y = .1,              # correlation between x2 and y     r.x1.x2 = .2,             # correlation between x1 and x2    k.y =  5,                 # y is likert   k.x1 = 2                  # x1 is binary )  test_power #>     N    pwr #> 1 350 0.8086"},{"path":"https://dbaranger.github.io/InteractionPoweR/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Power Analyses for Interaction Effects in Cross-Sectional Regressions","text":"use InteractionPoweR publication, please cite tutorial paper: Baranger DAA, Finsaas MC, Goldstein BL, Vize CE, Lynam DR, Olino TM (2023). “Tutorial: Power analyses interaction effects cross-sectional regressions.” Advances Methods Practices Psychological Science. 6(3). doi: 10.1177/25152459231187531","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/binary.p2skew.html","id":null,"dir":"Reference","previous_headings":"","what":"binary.p2skew — binary.p2skew","title":"binary.p2skew — binary.p2skew","text":"Converts probability parameter binomial distribution skew, assuming n=1.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/binary.p2skew.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"binary.p2skew — binary.p2skew","text":"","code":"binary.p2skew(p)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/binary.p2skew.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"binary.p2skew — binary.p2skew","text":"p binomial probability","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/binary.p2skew.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"binary.p2skew — binary.p2skew","text":"Skew","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/binary.p2skew.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"binary.p2skew — binary.p2skew","text":"","code":"binary.p2skew(p=.5) #> [1] 0"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/compute_adjustment.html","id":null,"dir":"Reference","previous_headings":"","what":"compute_adjustment — compute_adjustment","title":"compute_adjustment — compute_adjustment","text":"Computes much variable correlations need adjusted desired correlation structure transformation. Intended internal use .","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/compute_adjustment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute_adjustment — compute_adjustment","text":"","code":"compute_adjustment(   r.x1.y,   r.x2.y,   r.x1x2.y,   r.x1.x2,   N.adjustment = 1e+06,   tol = 0.005,   iter = 10,   k.x1,   k.x2,   k.y )"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/compute_adjustment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute_adjustment — compute_adjustment","text":"r.x1.y Internal use r.x2.y Internal use r.x1x2.y Internal use r.x1.x2 Internal use N.adjustment Internal use tol Internal use iter Internal use k.x1 Internal use k.x2 Internal use k.y Internal use ","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/compute_adjustment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compute_adjustment — compute_adjustment","text":"Correlation adjustments.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/compute_adjustment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compute_adjustment — compute_adjustment","text":"","code":"# \\donttest{ compute_adjustment(r.x1.y = .2,r.x2.y = .2,r.x1x2.y = .1,r.x1.x2 = .2, k.x1 = 0,k.x2=0,k.y=2) #> [1] -3.053113e-16  5.577190e-02  0.000000e+00  5.580208e-02  0.000000e+00 #> [6]  4.391339e-02 # }"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/cor.mat.3way.html","id":null,"dir":"Reference","previous_headings":"","what":"See the correlation matrix for a 3-way interaction — cor.mat.3way","title":"See the correlation matrix for a 3-way interaction — cor.mat.3way","text":"Prints plots correlation matrix 3-way interaction","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/cor.mat.3way.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See the correlation matrix for a 3-way interaction — cor.mat.3way","text":"","code":"cor.mat.3way(power.results, row.num = 1, return.plot = FALSE)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/cor.mat.3way.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"See the correlation matrix for a 3-way interaction — cor.mat.3way","text":"power.results Data frame results power_interaction_3way_r2(). row.num row show? Can single number. Default 1. return.plot Return matrix (FALSE, default), plot (TRUE)?","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/cor.mat.3way.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"See the correlation matrix for a 3-way interaction — cor.mat.3way","text":"matrix ggplot2 object","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/cor.mat.3way.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"See the correlation matrix for a 3-way interaction — cor.mat.3way","text":"","code":"power_analysis = power_interaction_3way_r2(detailed_results = TRUE,N = c(1000), r.x1.y = .2,r.x2.y = .3,r.x3.y = .1,r.x1x2.y = .01,r.x1x3.y = .05,r.x2x3.y = .1, b.x1x2x3 = 0.1,r.x1.x2 = .1,r.x1.x3 = .1,r.x2.x3 = .1, rel.x1 = 1,rel.x2 = 1,rel.x3 = 1,rel.y = 1 ) #> Performing 1 analyses #> Warning: executing %dopar% sequentially: no parallel backend registered #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union cor.mat.3way(power_analysis) #>                y        x1        x2        x3      x1x2      x1x3      x2x3 #> y      1.0000000 0.2000000 0.3000000 0.1000000 0.0100000 0.0500000 0.1000000 #> x1     0.2000000 1.0000000 0.1000000 0.1000000 0.0000000 0.0000000 0.0000000 #> x2     0.3000000 0.1000000 1.0000000 0.1000000 0.0000000 0.0000000 0.0000000 #> x3     0.1000000 0.1000000 0.1000000 1.0000000 0.0000000 0.0000000 0.0000000 #> x1x2   0.0100000 0.0000000 0.0000000 0.0000000 1.0000000 0.1089109 0.1089109 #> x1x3   0.0500000 0.0000000 0.0000000 0.0000000 0.1089109 1.0000000 0.1089109 #> x2x3   0.1000000 0.0000000 0.0000000 0.0000000 0.1089109 0.1089109 1.0000000 #> x1x2x3 0.1579191 0.1161169 0.1161169 0.1161169 0.0000000 0.0000000 0.0000000 #>           x1x2x3 #> y      0.1579191 #> x1     0.1161169 #> x2     0.1161169 #> x3     0.1161169 #> x1x2   0.0000000 #> x1x3   0.0000000 #> x2x3   0.0000000 #> x1x2x3 1.0000000"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/generate.interaction.cov.input.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates the input to power_interaction_r2_covs() — generate.interaction.cov.input","title":"Creates the input to power_interaction_r2_covs() — generate.interaction.cov.input","text":"Companion function 'power_interaction_r2_covs()'. Generates formatted list users specify analysis parameters.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/generate.interaction.cov.input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates the input to power_interaction_r2_covs() — generate.interaction.cov.input","text":"","code":"generate.interaction.cov.input(c.num)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/generate.interaction.cov.input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates the input to power_interaction_r2_covs() — generate.interaction.cov.input","text":"c.num Number covariates model.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/generate.interaction.cov.input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates the input to power_interaction_r2_covs() — generate.interaction.cov.input","text":"list used 'power_interaction_r2_covs()' function.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/generate.interaction.cov.input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates the input to power_interaction_r2_covs() — generate.interaction.cov.input","text":"","code":"ex1 = generate.interaction.cov.input(c.num=2) ex1$correlations$r.y.x1x2 = c(0.1,0.2,0.3)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/generate_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate interaction data set — generate_interaction","title":"Generate interaction data set — generate_interaction","text":"Simulate single data set interaction (y ~ x1 + x2 + x1*x2). values 'N' population-level effects - values within single simulated data set vary around defined values.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/generate_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate interaction data set — generate_interaction","text":"","code":"generate_interaction(   N,   r.x1.y,   r.x2.y,   r.x1x2.y,   r.x1.x2,   rel.x1 = 1,   rel.x2 = 1,   rel.y = 1,   k.x1 = 0,   k.x2 = 0,   k.y = 0,   adjust.correlations = TRUE,   tol = 0.005,   iter = 10,   N.adjustment = 1e+06,   r.x1.y.adjust = NULL,   r.x2.y.adjust = NULL,   r.x1.x2.adjust = NULL,   r.x1x2.y.adjust = NULL,   internal.adjust = FALSE,   skew.x1 = NA,   skew.x2 = NA,   skew.y = NA )"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/generate_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate interaction data set — generate_interaction","text":"N Sample size. Must positive integer. default value. r.x1.y Pearson's correlation x1 y. Must -1 1. default value. r.x2.y Pearson's correlation x2 y. Must -1 1. Assumed 'moderator' functions. default value. r.x1x2.y Pearson's correlation interaction term x1x2 (x1 * x2) y. Must -1 1. default value. r.x1.x2 Pearson's correlation x1 x2. Must -1 1. default value. rel.x1 Reliability x1 (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. rel.x2 Reliability x2 (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. rel.y Reliability xy (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. k.x1 Number discrete values x1. Can used make variable binary ordinal. k.x2 Number discrete values x2. Can used make variable binary ordinal. k.y Number discrete values y.Can used make variable binary ordinal. adjust.correlations variables ordinal binary, correlations adjusted output data specified correlation structure? Default TRUE. tol Correlation adjustment tolerance. adjust.correlations = TRUE, correlations adjusted population correlation within r='tol' target. Default = 0.005. iter Max number iterations run correlation adjustment . Typically couple needed. Default = 10. N.adjustment Sample size use adjusting correlations. Default = 1000000. r.x1.y.adjust Internal use . r.x2.y.adjust Internal use . r.x1.x2.adjust Internal use . r.x1x2.y.adjust Internal use . internal.adjust Internal use . skew.x1 longer supported. skew.x2 longer supported. skew.y longer supported.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/generate_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate interaction data set — generate_interaction","text":"data frame containing variables 'x1', 'x2', 'y', 'x1x2'. 'x1x2' x1*x2. correlations variables drawn defined population-level values. Output variables z-scored (mean=0, sd=1).","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/generate_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate interaction data set — generate_interaction","text":"","code":"dataset <- generate_interaction(N = 10,r.x1.y = 0,r.x2.y = .1,r.x1x2.y = -.2,r.x1.x2 = .3)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/name_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Name key for plotting — name_key","title":"Name key for plotting — name_key","text":"Expanded variable names plots look nicer.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/name_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Name key for plotting — name_key","text":"","code":"data(name_key)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/name_key.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Name key for plotting — name_key","text":"data frame 25 rows 2 variables","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2binary.html","id":null,"dir":"Reference","previous_headings":"","what":"norm2binary — norm2binary","title":"norm2binary — norm2binary","text":"Transforms vector normal distribution binomial distribution two values.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"norm2binary — norm2binary","text":"","code":"norm2binary(x, skew)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"norm2binary — norm2binary","text":"x Input vector skew Desired output skew","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"norm2binary — norm2binary","text":"binary variable","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"norm2binary — norm2binary","text":"","code":"norm2binary(x = rnorm(n = 100,mean = 0,sd = 1), skew = 1) #>              [,1] #>   [1,] -0.6204837 #>   [2,] -0.6204837 #>   [3,] -0.6204837 #>   [4,]  1.5955295 #>   [5,] -0.6204837 #>   [6,] -0.6204837 #>   [7,] -0.6204837 #>   [8,]  1.5955295 #>   [9,] -0.6204837 #>  [10,] -0.6204837 #>  [11,]  1.5955295 #>  [12,] -0.6204837 #>  [13,]  1.5955295 #>  [14,] -0.6204837 #>  [15,] -0.6204837 #>  [16,] -0.6204837 #>  [17,]  1.5955295 #>  [18,] -0.6204837 #>  [19,] -0.6204837 #>  [20,] -0.6204837 #>  [21,] -0.6204837 #>  [22,]  1.5955295 #>  [23,] -0.6204837 #>  [24,] -0.6204837 #>  [25,]  1.5955295 #>  [26,] -0.6204837 #>  [27,]  1.5955295 #>  [28,] -0.6204837 #>  [29,] -0.6204837 #>  [30,] -0.6204837 #>  [31,] -0.6204837 #>  [32,] -0.6204837 #>  [33,] -0.6204837 #>  [34,]  1.5955295 #>  [35,] -0.6204837 #>  [36,]  1.5955295 #>  [37,]  1.5955295 #>  [38,] -0.6204837 #>  [39,]  1.5955295 #>  [40,] -0.6204837 #>  [41,] -0.6204837 #>  [42,] -0.6204837 #>  [43,] -0.6204837 #>  [44,]  1.5955295 #>  [45,] -0.6204837 #>  [46,] -0.6204837 #>  [47,] -0.6204837 #>  [48,] -0.6204837 #>  [49,] -0.6204837 #>  [50,] -0.6204837 #>  [51,] -0.6204837 #>  [52,] -0.6204837 #>  [53,] -0.6204837 #>  [54,] -0.6204837 #>  [55,] -0.6204837 #>  [56,] -0.6204837 #>  [57,] -0.6204837 #>  [58,] -0.6204837 #>  [59,] -0.6204837 #>  [60,]  1.5955295 #>  [61,] -0.6204837 #>  [62,]  1.5955295 #>  [63,] -0.6204837 #>  [64,] -0.6204837 #>  [65,] -0.6204837 #>  [66,] -0.6204837 #>  [67,]  1.5955295 #>  [68,] -0.6204837 #>  [69,]  1.5955295 #>  [70,] -0.6204837 #>  [71,] -0.6204837 #>  [72,]  1.5955295 #>  [73,] -0.6204837 #>  [74,] -0.6204837 #>  [75,]  1.5955295 #>  [76,] -0.6204837 #>  [77,]  1.5955295 #>  [78,] -0.6204837 #>  [79,]  1.5955295 #>  [80,]  1.5955295 #>  [81,]  1.5955295 #>  [82,]  1.5955295 #>  [83,] -0.6204837 #>  [84,] -0.6204837 #>  [85,] -0.6204837 #>  [86,] -0.6204837 #>  [87,] -0.6204837 #>  [88,]  1.5955295 #>  [89,] -0.6204837 #>  [90,] -0.6204837 #>  [91,] -0.6204837 #>  [92,] -0.6204837 #>  [93,]  1.5955295 #>  [94,] -0.6204837 #>  [95,]  1.5955295 #>  [96,] -0.6204837 #>  [97,] -0.6204837 #>  [98,] -0.6204837 #>  [99,]  1.5955295 #> [100,] -0.6204837 #> attr(,\"scaled:center\") #> [1] 0.28 #> attr(,\"scaled:scale\") #> [1] 0.4512609"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"norm2gamma — norm2gamma","title":"norm2gamma — norm2gamma","text":"Transforms vector normal distribution gamma distribution.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"norm2gamma — norm2gamma","text":"","code":"norm2gamma(x, skew)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"norm2gamma — norm2gamma","text":"x Input vector skew Desired skew","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"norm2gamma — norm2gamma","text":"vector (skewed) gamma distribution","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2gamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"norm2gamma — norm2gamma","text":"","code":"norm2gamma(x = rnorm(n = 100,mean = 0,sd = 1), skew = 1) #>                [,1] #>   [1,]  0.758507402 #>   [2,] -0.680597845 #>   [3,] -1.366489108 #>   [4,] -0.643185284 #>   [5,]  2.598009136 #>   [6,]  1.527973685 #>   [7,] -0.275210682 #>   [8,] -0.665485265 #>   [9,] -0.143131653 #>  [10,] -0.548332788 #>  [11,] -1.655868640 #>  [12,] -0.661452596 #>  [13,] -0.850311882 #>  [14,]  0.055335261 #>  [15,]  1.603261156 #>  [16,] -1.519969045 #>  [17,]  2.812785116 #>  [18,]  0.299501482 #>  [19,] -1.267621514 #>  [20,] -0.554856636 #>  [21,]  1.427001648 #>  [22,]  0.280243653 #>  [23,] -0.922739861 #>  [24,]  0.316008762 #>  [25,]  0.639753944 #>  [26,] -0.318319520 #>  [27,]  0.137758904 #>  [28,] -0.360758274 #>  [29,] -0.433457588 #>  [30,]  0.176080697 #>  [31,] -0.346272616 #>  [32,]  0.018426869 #>  [33,]  0.253579043 #>  [34,] -1.055969090 #>  [35,]  0.204580468 #>  [36,] -0.758788651 #>  [37,] -0.851551326 #>  [38,] -0.935837245 #>  [39,]  0.687967435 #>  [40,]  1.652852805 #>  [41,]  0.007711964 #>  [42,] -1.323137023 #>  [43,]  0.588151961 #>  [44,]  1.743704301 #>  [45,]  0.980354418 #>  [46,]  0.684140632 #>  [47,]  0.023504112 #>  [48,] -0.911576271 #>  [49,]  1.351325631 #>  [50,]  0.286844280 #>  [51,]  1.233903600 #>  [52,]  0.887056956 #>  [53,] -0.665102428 #>  [54,] -0.534524870 #>  [55,] -0.152524370 #>  [56,]  0.354199170 #>  [57,] -1.033869529 #>  [58,] -0.152978935 #>  [59,]  0.234188542 #>  [60,]  0.258446408 #>  [61,] -1.282003343 #>  [62,]  0.245804822 #>  [63,]  0.095768202 #>  [64,] -0.696507169 #>  [65,] -0.191092450 #>  [66,] -0.836353101 #>  [67,]  2.146764741 #>  [68,] -1.223643826 #>  [69,]  0.835846589 #>  [70,] -1.703848573 #>  [71,] -0.892132650 #>  [72,] -0.875552503 #>  [73,]  0.805337076 #>  [74,] -0.567487724 #>  [75,]  0.808219330 #>  [76,]  0.390632253 #>  [77,] -1.110982796 #>  [78,] -0.131209469 #>  [79,] -1.387493106 #>  [80,]  2.061251131 #>  [81,]  0.322238815 #>  [82,] -1.057810072 #>  [83,] -0.800849692 #>  [84,]  0.679332551 #>  [85,] -0.417436112 #>  [86,] -0.728089472 #>  [87,] -0.300722471 #>  [88,]  0.467184496 #>  [89,]  0.115512058 #>  [90,] -0.580779035 #>  [91,]  0.513684362 #>  [92,] -0.495191744 #>  [93,]  0.900318614 #>  [94,] -0.478524299 #>  [95,]  1.844594139 #>  [96,]  0.222938939 #>  [97,] -1.165050132 #>  [98,] -0.231723388 #>  [99,]  2.938541120 #> [100,] -0.732725019 #> attr(,\"scaled:center\") #> [1] 3.870348 #> attr(,\"scaled:scale\") #> [1] 2.02584"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2ordinal.html","id":null,"dir":"Reference","previous_headings":"","what":"norm2ordinal — norm2ordinal","title":"norm2ordinal — norm2ordinal","text":"Transforms vector normal distribution binomial distribution two values.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2ordinal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"norm2ordinal — norm2ordinal","text":"","code":"norm2ordinal(x, k)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2ordinal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"norm2ordinal — norm2ordinal","text":"x Input vector k Number discrete values (e.g., 2=binary, 5=likert scale)","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2ordinal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"norm2ordinal — norm2ordinal","text":"ordinal binary variable","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/norm2ordinal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"norm2ordinal — norm2ordinal","text":"","code":"norm2ordinal(x = rnorm(n = 100,mean = 0,sd = 1),k=2) #>              [,1] #>   [1,]  1.0565903 #>   [2,]  1.0565903 #>   [3,]  1.0565903 #>   [4,] -0.9369763 #>   [5,] -0.9369763 #>   [6,]  1.0565903 #>   [7,]  1.0565903 #>   [8,]  1.0565903 #>   [9,] -0.9369763 #>  [10,] -0.9369763 #>  [11,] -0.9369763 #>  [12,] -0.9369763 #>  [13,]  1.0565903 #>  [14,]  1.0565903 #>  [15,] -0.9369763 #>  [16,] -0.9369763 #>  [17,] -0.9369763 #>  [18,]  1.0565903 #>  [19,] -0.9369763 #>  [20,]  1.0565903 #>  [21,] -0.9369763 #>  [22,]  1.0565903 #>  [23,]  1.0565903 #>  [24,]  1.0565903 #>  [25,]  1.0565903 #>  [26,]  1.0565903 #>  [27,] -0.9369763 #>  [28,] -0.9369763 #>  [29,]  1.0565903 #>  [30,] -0.9369763 #>  [31,]  1.0565903 #>  [32,] -0.9369763 #>  [33,]  1.0565903 #>  [34,] -0.9369763 #>  [35,]  1.0565903 #>  [36,] -0.9369763 #>  [37,]  1.0565903 #>  [38,]  1.0565903 #>  [39,] -0.9369763 #>  [40,]  1.0565903 #>  [41,] -0.9369763 #>  [42,] -0.9369763 #>  [43,] -0.9369763 #>  [44,]  1.0565903 #>  [45,] -0.9369763 #>  [46,] -0.9369763 #>  [47,]  1.0565903 #>  [48,] -0.9369763 #>  [49,] -0.9369763 #>  [50,]  1.0565903 #>  [51,] -0.9369763 #>  [52,]  1.0565903 #>  [53,]  1.0565903 #>  [54,] -0.9369763 #>  [55,]  1.0565903 #>  [56,]  1.0565903 #>  [57,] -0.9369763 #>  [58,]  1.0565903 #>  [59,]  1.0565903 #>  [60,]  1.0565903 #>  [61,]  1.0565903 #>  [62,]  1.0565903 #>  [63,]  1.0565903 #>  [64,]  1.0565903 #>  [65,] -0.9369763 #>  [66,] -0.9369763 #>  [67,] -0.9369763 #>  [68,] -0.9369763 #>  [69,]  1.0565903 #>  [70,]  1.0565903 #>  [71,]  1.0565903 #>  [72,] -0.9369763 #>  [73,] -0.9369763 #>  [74,]  1.0565903 #>  [75,] -0.9369763 #>  [76,] -0.9369763 #>  [77,] -0.9369763 #>  [78,] -0.9369763 #>  [79,] -0.9369763 #>  [80,] -0.9369763 #>  [81,] -0.9369763 #>  [82,]  1.0565903 #>  [83,]  1.0565903 #>  [84,]  1.0565903 #>  [85,] -0.9369763 #>  [86,] -0.9369763 #>  [87,] -0.9369763 #>  [88,] -0.9369763 #>  [89,] -0.9369763 #>  [90,] -0.9369763 #>  [91,]  1.0565903 #>  [92,]  1.0565903 #>  [93,]  1.0565903 #>  [94,] -0.9369763 #>  [95,] -0.9369763 #>  [96,]  1.0565903 #>  [97,] -0.9369763 #>  [98,] -0.9369763 #>  [99,] -0.9369763 #> [100,] -0.9369763 #> attr(,\"scaled:center\") #> [1] 0.47 #> attr(,\"scaled:scale\") #> [1] 0.5016136"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot interaction — plot_interaction","title":"Plot interaction — plot_interaction","text":"Plots single simulated interaction data set","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot interaction — plot_interaction","text":"","code":"plot_interaction(data, q = 3)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot interaction — plot_interaction","text":"data Output generate_interaction(). q Simple slope quantiles. Default 2. X2 default moderator, unless X1 already binary. Must positive integer > 1.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot interaction — plot_interaction","text":"ggplot2 object","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot interaction — plot_interaction","text":"","code":"dataset <- generate_interaction(N = 250,r.x1.y = 0,r.x2.y = .1,r.x1x2.y = -.2,r.x1.x2 = .3) plot_interaction(dataset,q=3)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_power_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot power curve — plot_power_curve","title":"Plot power curve — plot_power_curve","text":"Plot output power_interaction().","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_power_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot power curve — plot_power_curve","text":"","code":"plot_power_curve(   power_data,   x = NULL,   group = NULL,   facets = NULL,   power_target = 0.8 )"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_power_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot power curve — plot_power_curve","text":"power_data Data frame results power_interaction(). Can accept raw results 3 parameters varied simulation. data filtered first. x Optional, x-axis plot. Default first variable 'pwr'. group Optional, grouping variable line color. Default second variable 'pwr', present. facets Optional, grouping variable plot facets. Default third variable 'pwr' present. power_target target power. Default 80%.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_power_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot power curve — plot_power_curve","text":"ggplot2 object","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_power_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot power curve — plot_power_curve","text":"","code":"power_analysis <- power_interaction(n.iter = 10,N = seq(100,300,by=100),  r.x1.y = 0,r.x2.y = .1,r.x1x2.y = -.2,r.x1.x2 = .3,detailed_results = TRUE) #> Performing 30 simulations #>  #> Attaching package: 'MASS' #> The following object is masked from 'package:dplyr': #>  #>     select  plot_power_curve(power_analysis) #> Warning: span too small.   fewer data values than degrees of freedom. #> Warning: pseudoinverse used at 99 #> Warning: neighborhood radius 101 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 10201 #> Warning: span too small.   fewer data values than degrees of freedom. #> Warning: pseudoinverse used at 99 #> Warning: neighborhood radius 101 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 10201 #> Warning: no non-missing arguments to max; returning -Inf"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_simple_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple slope plot — plot_simple_slope","title":"Simple slope plot — plot_simple_slope","text":"Plots simple slope min max estimates power_interaction().","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_simple_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple slope plot — plot_simple_slope","text":"","code":"plot_simple_slope(power_data, x = NULL, facets = NULL)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_simple_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple slope plot — plot_simple_slope","text":"power_data Data frame results power_interaction(). Can accept raw results 2 parameters varied simulation. data filtered first. x Optional, x-axis plot. Default first variable 'pwr'. facets Optional, grouping variable plot facets. Default second variable 'pwr' present.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_simple_slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple slope plot — plot_simple_slope","text":"ggplot2 object","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/plot_simple_slope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple slope plot — plot_simple_slope","text":"","code":"power_analysis <- power_interaction(n.iter = 10,N = seq(100,300,by=100), r.x1.y = 0,r.x2.y = .1,r.x1x2.y = -.2,r.x1.x2 = .3,detailed_results = TRUE) #> Performing 30 simulations plot_simple_slope(power_analysis)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Power estimate — power_estimate","title":"Power estimate — power_estimate","text":"Uses regression estimate value needed attain target power, given set simulation results.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power estimate — power_estimate","text":"","code":"power_estimate(power_data, x, power_target)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power estimate — power_estimate","text":"power_data Output power_interaction(). x name target variable character string. power_target desired power level. Must 0 1 (e.g., 0.8 80% power).","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power estimate — power_estimate","text":"data frame containing value x achieves target power combination settings. return NA target power outside simulation data.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power estimate — power_estimate","text":"","code":"simulation_results = power_interaction_r2(N=seq(100,300,by=10), r.x1.y=0.2, r.x2.y=.2,r.x1x2.y=0.2,r.x1.x2=.2) power_estimate(power_data = simulation_results, x = \"N\", power_target = .8) #> [1] 188.4554"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Power analysis for interactions — power_interaction","title":"Power analysis for interactions — power_interaction","text":"Power analysis interaction models, simulation. set n.iter simulations run unique combination model settings.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power analysis for interactions — power_interaction","text":"","code":"power_interaction(   n.iter,   N,   r.x1.y,   r.x2.y,   r.x1x2.y,   r.x1.x2,   rel.x1 = 1,   rel.x2 = 1,   rel.y = 1,   k.x1 = 0,   k.x2 = 0,   k.y = 0,   adjust.correlations = TRUE,   alpha = 0.05,   q = 2,   cl = NULL,   ss.IQR = 1.5,   N.adjustment = 1e+06,   detailed_results = FALSE,   full_simulation = FALSE,   tol = 0.005,   iter = 10,   skew.x1 = NA,   skew.x2 = NA,   skew.y = NA )"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power analysis for interactions — power_interaction","text":"n.iter Number iterations. number simulations run unique setting combination. Must positive integer. N Sample size. Must positive integer. default value. Can single value vector values. r.x1.y Pearson's correlation x1 y. Must -1 1.. default value. Can single value vector values. r.x2.y Pearson's correlation x2 y. Must -1 1.. Assumed 'moderator' functions. default value. Can single value vector values. r.x1x2.y Pearson's correlation interaction term x1x2 (x1 * x2) y. Must -1 1.. default value. Can single value vector values. r.x1.x2 Pearson's correlation x1 x2. Must -1 1.. default value. Can single value vector values. rel.x1 Reliability x1 (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. rel.x2 Reliability x2 (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. rel.y Reliability xy (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. k.x1 Number discrete values x1. Can used make variable binary ordinal. k.x2 Number discrete values x2. Can used make variable binary ordinal. k.y Number discrete values y. Can used make variable binary ordinal. adjust.correlations variables ordinal binary, correlations adjusted output data specified correlation structure? Default TRUE. alpha alpha. p-value interaction deemed significant? Default 0.05. q Simple slopes. many quantiles x2 split simple slope testing? Default 2. Simple slope testing returns effect-size (slope) y~x1 two extreme quantiles x2. q=3 two slopes y~x1 bottom 33% x2, top 33% x2. cl Number clusters use running simulations parallel (recommended). Default 1 (.e. parallel). ss.IQR Simple slope IQR. Multiplier estimating distribution simple slopes within simulation setting. Default 1.5. N.adjustment Sample size simulations correlation matrix corrected allow binary/ordinal variables. Default 1000000 detailed_results Default FALSE. detailed results reported? full_simulation Default FALSE. TRUE, return list includes full per-simulation results. tol Correlation adjustment tolerance. adjust.correlations = TRUE, correlations adjusted population correlation within r='tol' target. Default = 0.005. iter Max number iterations run correlation adjustment . Typically couple needed. Default = 10. skew.x1 longer supported. skew.x2 longer supported. skew.y longer supported.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power analysis for interactions — power_interaction","text":"data frame containing power (% significant results) unique setting combination. full_simulation = TRUE return list, one data frame includes power, second includes raw simulation results.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power analysis for interactions — power_interaction","text":"","code":"power_interaction(n.iter=10, N=10,r.x1.y=0.2, r.x2.y=.2,r.x1x2.y=0.5,r.x1.x2=.2) #> Performing 10 simulations #>    N pwr #> 1 10 0.1"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_3way_r2.html","id":null,"dir":"Reference","previous_headings":"","what":"Analytic power analysis for 3-way interactions — power_interaction_3way_r2","title":"Analytic power analysis for 3-way interactions — power_interaction_3way_r2","text":"Power analysis 3-way interaction models, computed via change R2. Valid interactions continuous, normally distributed, variables. Either b.x1x2x3 f2 can used specify magnitude interaction effect size.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_3way_r2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analytic power analysis for 3-way interactions — power_interaction_3way_r2","text":"","code":"power_interaction_3way_r2(   N,   b.x1x2x3,   r.x1.y,   r.x2.y,   r.x3.y,   r.x1x2.y,   r.x1x3.y,   r.x2x3.y,   r.x1.x2,   r.x1.x3,   r.x2.x3,   rel.x1 = 1,   rel.x2 = 1,   rel.x3 = 1,   rel.y = 1,   alpha = 0.05,   detailed_results = FALSE,   cl = NULL )"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_3way_r2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analytic power analysis for 3-way interactions — power_interaction_3way_r2","text":"N Sample size. Must positive integer. default value. Can single value vector values. b.x1x2x3 Regression coefficient 3-way interaction term x1x2x3. specified f2 specified. Must -1 1. Default NULL. Can single value vector values. r.x1.y Pearson's correlation x1 y. Must -1 1. default value. Can single value vector values. r.x2.y Pearson's correlation x2 y. Must -1 1. Assumed 'moderator' functions. default value. Can single value vector values. r.x3.y Pearson's correlation x3 y. Must -1 1. Assumed 'moderator' functions. default value. Can single value vector values. r.x1x2.y Pearson's correlation interaction term x1x2 (x1 * x2) y. Must -1 1. default value. Can single value vector values. r.x1x3.y Pearson's correlation interaction term x1x2 (x1 * x3) y. Must -1 1. default value. Can single value vector values. r.x2x3.y Pearson's correlation interaction term x1x2 (x2 * x3) y. Must -1 1. default value. Can single value vector values. r.x1.x2 Pearson's correlation x1 x2. Must -1 1. default value. Can single value vector values. r.x1.x3 Pearson's correlation x1 x3. Must -1 1. default value. Can single value vector values. r.x2.x3 Pearson's correlation x2 x3. Must -1 1. default value. Can single value vector values. rel.x1 Reliability x1 (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. rel.x2 Reliability x2 (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. rel.x3 Reliability x3 (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. rel.y Reliability xy (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. alpha alpha. p-value interaction deemed significant? Default 0.05. detailed_results Default FALSE. detailed results reported? Returns regression slopes, f2, r2, full correlation matrix. cl Number clusters use running simulations parallel. Default NULL (.e. parallel). Useful running several thousand analyses .","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_3way_r2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analytic power analysis for 3-way interactions — power_interaction_3way_r2","text":"data frame containing power unique setting combination.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_3way_r2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analytic power analysis for 3-way interactions — power_interaction_3way_r2","text":"","code":"power_interaction_3way_r2(N=1000,r.x1.y = .1,r.x2.y = .2,r.x3.y = .3, r.x1x2.y =  .05,r.x1x3.y =  .07,r.x2x3.y =  .09,b.x1x2x3 =0.01, r.x1.x2 = .2,r.x1.x3 = .4,r.x2.x3 = .3) #> Performing 1 analyses #>          pwr    N b.x1x2x3 r.y.x1 r.y.x2 r.y.x3 r.y.x1x2 r.y.x1x3 r.y.x2x3 #> 1 0.06732723 1000     0.01    0.1    0.2    0.3     0.05     0.07     0.09 #>   r.x1.x2 r.x1.x3 r.x2.x3 rel.x1 rel.x2 rel.x3 rel.y alpha #> 1     0.2     0.4     0.3      1      1      1     1  0.05"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_r2.html","id":null,"dir":"Reference","previous_headings":"","what":"Analytic power analysis for interactions — power_interaction_r2","title":"Analytic power analysis for interactions — power_interaction_r2","text":"Power analysis interaction models, computed via change R2. Valid interactions continuous, normally distributed, variables.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_r2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analytic power analysis for interactions — power_interaction_r2","text":"","code":"power_interaction_r2(   N,   r.x1.y,   r.x2.y,   r.x1x2.y,   r.x1.x2,   rel.x1 = 1,   rel.x2 = 1,   rel.y = 1,   alpha = 0.05,   detailed_results = FALSE )"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_r2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analytic power analysis for interactions — power_interaction_r2","text":"N Sample size. Must positive integer. default value. Can single value vector values. r.x1.y Pearson's correlation x1 y. Must -1 1. default value. Can single value vector values. r.x2.y Pearson's correlation x2 y. Must -1 1. Assumed 'moderator' functions. default value. Can single value vector values. r.x1x2.y Pearson's correlation interaction term x1x2 (x1 * x2) y. Must -1 1. default value. Can single value vector values. r.x1.x2 Pearson's correlation x1 x2. Must -1 1. default value. Can single value vector values. rel.x1 Reliability x1 (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. rel.x2 Reliability x2 (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. rel.y Reliability xy (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. alpha alpha. p-value interaction deemed significant? Default 0.05. detailed_results Default FALSE. detailed results reported?","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_r2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analytic power analysis for interactions — power_interaction_r2","text":"data frame containing power unique setting combination.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_r2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analytic power analysis for interactions — power_interaction_r2","text":"","code":"power_interaction_r2(N=seq(100,300,by=10),r.x1.y=0.2, r.x2.y=.2,r.x1x2.y=0.2,r.x1.x2=.2) #>      N       pwr #> 1  100 0.5234529 #> 2  110 0.5644556 #> 3  120 0.6029253 #> 4  130 0.6388492 #> 5  140 0.6722526 #> 6  150 0.7031912 #> 7  160 0.7317444 #> 8  170 0.7580089 #> 9  180 0.7820942 #> 10 190 0.8041182 #> 11 200 0.8242037 #> 12 210 0.8424759 #> 13 220 0.8590596 #> 14 230 0.8740776 #> 15 240 0.8876497 #> 16 250 0.8998908 #> 17 260 0.9109111 #> 18 270 0.9208148 #> 19 280 0.9297000 #> 20 290 0.9376587 #> 21 300 0.9447766"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_r2_covs.html","id":null,"dir":"Reference","previous_headings":"","what":"Analytic interaction power analysis with covariates — power_interaction_r2_covs","title":"Analytic interaction power analysis with covariates — power_interaction_r2_covs","text":"Analytic power analysis interaction model covariates. Additional covariate x main effect interaction terms additionally added.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_r2_covs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analytic interaction power analysis with covariates — power_interaction_r2_covs","text":"","code":"power_interaction_r2_covs(   cov.input,   N,   alpha = 0.05,   detailed_results = FALSE,   cl = NULL )"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_r2_covs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analytic interaction power analysis with covariates — power_interaction_r2_covs","text":"cov.input Output 'power_interaction_r2_covs()'. Variable correlations reliabilities set first modifying list. N Sample size. Must positive integer. default value. Can single value vector values. alpha alpha. p-value interaction deemed significant? Default 0.05. detailed_results Default FALSE. detailed results reported? cl Number clusters use running simulations parallel. Default NULL (.e. parallel). Useful running several thousand analyses .","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_r2_covs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analytic interaction power analysis with covariates — power_interaction_r2_covs","text":"data frame containing analytic power unique setting combination.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/power_interaction_r2_covs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analytic interaction power analysis with covariates — power_interaction_r2_covs","text":"","code":"ex1 = generate.interaction.cov.input(c.num=2) ex1$correlations$r.y.x1x2 = c(0.1,0.2,0.3) power_interaction_r2_covs(cov.input = ex1,N=100) #> Performing 3 analyses #>         pwr r.y.x1 r.y.x2 r.y.c1 r.y.c2 r.y.x1x2 r.y.c1x1 r.y.c1x2 r.y.c2x1 #> 1 0.1566418      0      0      0      0      0.1        0        0        0 #> 2 0.4712674      0      0      0      0      0.2        0        0        0 #> 3 0.8082680      0      0      0      0      0.3        0        0        0 #>   r.y.c2x2 r.x1.x2 r.x1.c1 r.x1.c2 r.x1.c1x2 r.x1.c2x2 r.x2.c1 r.x2.c2 #> 1        0       0       0       0         0         0       0       0 #> 2        0       0       0       0         0         0       0       0 #> 3        0       0       0       0         0         0       0       0 #>   r.x2.c1x1 r.x2.c2x1 r.c1.c2 r.c1.x1x2 r.c1.c2x1 r.c1.c2x2 r.c2.x1x2 r.c2.c1x1 #> 1         0         0       0         0         0         0         0         0 #> 2         0         0       0         0         0         0         0         0 #> 3         0         0       0         0         0         0         0         0 #>   r.c2.c1x2 rel.y rel.x1 rel.x2 rel.c1 rel.c2 alpha   N #> 1         0     1      1      1      1      1  0.05 100 #> 2         0     1      1      1      1      1  0.05 100 #> 3         0     1      1      1      1      1  0.05 100"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/run_pos_power_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the point of stability for a two-way interaction estimate — run_pos_power_search","title":"Calculate the point of stability for a two-way interaction estimate — run_pos_power_search","text":"Calculate point stability two-way interaction estimate","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/run_pos_power_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the point of stability for a two-way interaction estimate — run_pos_power_search","text":"","code":"run_pos_power_search(   r.x1.y,   r.x2.y,   r.x1x2.y = NULL,   r.x1.x2,   rel.x1,   rel.x2,   rel.y = 1,   single.N = NULL,   start.power = 0.8,   step = NULL,   n.datasets = 1000,   lower.bound = NULL,   upper.bound = NULL,   cos.width = 0.5,   pos.percent = 0.8,   n.cores = 1 )"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/run_pos_power_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the point of stability for a two-way interaction estimate — run_pos_power_search","text":"r.x1.y Pearson's correlation x1 y. Must -1 1. default value. r.x2.y Pearson's correlation x2 y. Must -1 1. Assumed 'moderator' functions. default value. r.x1x2.y Pearson's correlation interaction term x1x2 (x1 * x2) y. Must -1 1. NULL unspecified, automatically assigned average main effects divided 2, considering reliability. default value NULL. r.x1.x2 Pearson's correlation x1 x2. Must -1 1. default value. rel.x1 Reliability x1 (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. rel.x2 Reliability x2 (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. rel.y Reliability xy (e.g. test-retest reliability, ICC, Cronbach's alpha). Default 1 (perfect reliability). Must greater 0 less equal 1. single.N Numeric NULL. specific sample size stability statistics (POS, COS) computed. numeric value overrides search POS. Must whole number greater 0 NULL. Default NULL. start.power Numeric NULL. Determines starting sample size search locating sample size power equal start.power. non-null, must greater 0 less 1. Note non-null start.power overrides user inputs parameters lower.bound upper.bound NULL. default 0.8. step Numeric NULL. Determines rounding (degree precision) estimate POS. set NULL, dynamic adjustments made 1/100th interval upper.bound lower.bound iteration search algorithm. non-null, must whole natural number. Default NULL. n.datasets Numeric. Number simulations conducted sample size identified search process. Larger values result greater computational demands. Default 10000. Must greater 1. lower.bound Numeric NULL. lower bound search. automatically assigned set NULL user can manually input one. automatic override NULL start.power non-null. default NULL. upper.bound Numeric NULL. upper bound search. null, upper bound determined automatically; ceiling 1e7. Default NULL. cos.width Numeric. width corridor stability COS within require number estimates fall identify POS. Must greater 0. Values 1 unlikely informative. Default 0.5. pos.percent Numeric. minimum proportion simulated estimates require fall inside COS consider sample size produce stable estimates. Default 0.8. n.cores Numeric. Number cores used parallel processing. Default 1.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/run_pos_power_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the point of stability for a two-way interaction estimate — run_pos_power_search","text":"data frame containing variables 'rel.x1', 'rel.x2', 'rel.x1x2', 'rel.y', 'r.x1x2.y', 'r.x1.y', 'r.x2.y', 'obs.r.x1x2.y', 'COS_pos.percents', 'COS_interval', 'POS_samplesize', 'POS_power' data frame containing variables 'single.N', 'rel.x1', 'rel.x2', 'rel.x1x2', 'rel.y', 'r.x1x2.y', 'r.x1.y', 'r.x2.y', 'obs.r.x1x2.y', 'COS_pos.percents', 'within_COS_interval', 'POS_determined_COS', 'within_POS_determined_COS', 'POS_determined_COS.percent', sign_error_rate', 'power' user inputs single.N NULL, first dataframe returned search results POS. user inputs single.N numeric whole number greater 3, second dataframe returned stability information specific sample size.","code":"COS_pos.percents: A string representing the COS width and target POS percentage.      within_COS_interval: The proportion of estimates within the inputted COS at the sample size single.N.      POS_determined_COS: The COS necessary to achieve the inputted pos.percent at the sample size single.N. There is a ceiling of 100 times the magnitude of the estimate.      within_POS_determined_COS: The proportion of estimates within the POS_determined_COS at the sample size single.N.      POS_determined_COS.percent: The percent deviation from the expected value defining POS_determined_COS.      sign_error_rate: The number of estimates signed incorrectly at the sample size single.N.      power: The statistical power, calculated analytically, at the sample size single.N.      r.x1x2.y_to_be_stable_at_single.N: The minimum interaction effect required for stability at the sample size single.N, determined via binary search.      power_to_be_stable: The statistical power associated with the stable_effect_size at sample size single.N."},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/run_pos_power_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the point of stability for a two-way interaction estimate — run_pos_power_search","text":"","code":"run_pos_power_search(r.x1.y = 0.2, r.x2.y = 0.2, r.x1x2.y = 0.15, r.x1.x2 = 0.1, rel.x1 = 0.8, rel.x2 = 0.8,start.power = 0.8, step = NULL, n.datasets = 1000, lower.bound = NULL, upper.bound = 500, cos.width = 0.5, pos.percent = 0.8) #> The sample size at the start.power of 0.8 is 515. Re-running the search with lower.bound set to 258 and upper bound set to 515.  #>   rel.x1 rel.x2  rel.x1x2 rel.y r.x1x2.y r.x1.y r.x2.y r.x1.x2 obs.r.x1x2.y #> 1    0.8    0.8 0.6435644     1     0.15    0.2    0.2     0.1    0.1203337 #>   COS_pos.percents     COS_interval POS_samplesize POS_power #> 1         (50, 80) [0.0602, 0.1805]            459 0.7529432"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/simple.slopes.3way.html","id":null,"dir":"Reference","previous_headings":"","what":"See the simple slopes for a 3-way interaction — simple.slopes.3way","title":"See the simple slopes for a 3-way interaction — simple.slopes.3way","text":"Prints plots simple slopes 3-way interaction","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/simple.slopes.3way.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See the simple slopes for a 3-way interaction — simple.slopes.3way","text":"","code":"simple.slopes.3way(power.results, row.num = 1, return.plot = FALSE)"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/simple.slopes.3way.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"See the simple slopes for a 3-way interaction — simple.slopes.3way","text":"power.results Data frame results power_interaction_3way_r2(). row.num row show? Can single number. Default 1. return.plot Return matrix (FALSE, default), plot (TRUE)?","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/simple.slopes.3way.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"See the simple slopes for a 3-way interaction — simple.slopes.3way","text":"matrix ggplot2 object","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/simple.slopes.3way.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"See the simple slopes for a 3-way interaction — simple.slopes.3way","text":"","code":"power_analysis = power_interaction_3way_r2(detailed_results = TRUE,N = c(1000), r.x1.y = .2,r.x2.y = .3,r.x3.y = .1,r.x1x2.y = .01,r.x1x3.y = .05,r.x2x3.y = .1, b.x1x2x3 = 0.1,r.x1.x2 = .1,r.x1.x3 = .1,r.x2.x3 = .1, rel.x1 = 1,rel.x2 = 1,rel.x3 = 1,rel.y = 1 ) #> Performing 1 analyses simple.slopes.3way(power_analysis) #>      X2    X3   intercept      slope #> 1 -1 SD -1 SD -0.21764617 0.22162374 #> 2  Mean -1 SD -0.04555556 0.11681215 #> 3  1 SD -1 SD  0.12653506 0.01200055 #> 4 -1 SD  Mean -0.26777778 0.16147826 #> 5  Mean  Mean  0.00000000 0.15666667 #> 6  1 SD  Mean  0.26777778 0.15185507 #> 7 -1 SD  1 SD -0.31790938 0.10133278 #> 8  Mean  1 SD  0.04555556 0.19652119 #> 9  1 SD  1 SD  0.40902050 0.29170959"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/test_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Test interaction — test_interaction","title":"Test interaction — test_interaction","text":"Test interaction single simulated data set.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/test_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test interaction — test_interaction","text":"","code":"test_interaction(   data,   alpha = 0.05,   detailed_results = FALSE,   q = 2,   simple = FALSE )"},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/test_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test interaction — test_interaction","text":"data Simulated data set. Output 'generate_interaction()'. alpha alpha. p-value interaction deemed significant? Default 0.05. detailed_results results beyond linear model (change R2, simple slopes, correlations, confidence intervals) returned? Default FALSE. q Simple slopes. many quantiles x2 split simple slope testing? Default 2. Simple slope testing returns effect-size (slope) y~x1 two extreme quantiles x2. q=3 two slopes y~x1 bottom 33% x2, top 33% x2. simple internal use. Default FALSE.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/test_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test interaction — test_interaction","text":"Either named list data frame containing results regression y~x1+x2+x1*x2, pearson's correlation y, x1,x2, x1x2, slopes simple slopes.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/reference/test_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test interaction — test_interaction","text":"","code":"dataset <- generate_interaction(N = 250,r.x1.y = 0,r.x2.y = .1,r.x1x2.y = -.2,r.x1.x2 = .3) test_interaction(data = dataset, alpha=0.05, q=2) #> $linear.model #>         Estimate Std. Error    t value     Pr(>|t|) #> x1    0.01066427 0.06508712  0.1638460 0.8699868878 #> x2    0.01803371 0.06508365  0.2770852 0.7819474049 #> x1x2 -0.22203629 0.06100056 -3.6399056 0.0003324027 #>"},{"path":"https://dbaranger.github.io/InteractionPoweR/news/index.html","id":"interactionpower-023","dir":"Changelog","previous_headings":"","what":"InteractionPoweR 0.2.3","title":"InteractionPoweR 0.2.3","text":"Adds two-way interaction stability function - run_pos_power_search().","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/news/index.html","id":"interactionpower-022","dir":"Changelog","previous_headings":"","what":"InteractionPoweR 0.2.2","title":"InteractionPoweR 0.2.2","text":"CRAN release: 2024-07-09 Adds power analysis function 3-way interactions - power_interaction_3way_r2(). Adds convenience function visualizing correlation matrix 3-way interaction - cor.mat.3way(). Adds convenience function visualizing simple slopes 3-way interaction - simple.slopes.3way(). Adds power analysis function 2-way interactions covariates - generate.interaction.cov.input() power_interaction_r2_covs(). Minor bug fixes. Removes dependency {MASS} package.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/news/index.html","id":"interactionpower-021","dir":"Changelog","previous_headings":"","what":"InteractionPoweR 0.2.1","title":"InteractionPoweR 0.2.1","text":"CRAN release: 2023-04-18 Fix bug power_interaction_r2() effected analyses high ‘r.x1.x2’ correlation. Fix warning plot_interaction(). Adds additional descriptive error messages.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/news/index.html","id":"interactionpower-020","dir":"Changelog","previous_headings":"","what":"InteractionPoweR 0.2.0","title":"InteractionPoweR 0.2.0","text":"CRAN release: 2022-10-20 Removes options specifying skew, contained bug. Also speed-simulations.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/news/index.html","id":"interactionpower-011","dir":"Changelog","previous_headings":"","what":"InteractionPoweR 0.1.1","title":"InteractionPoweR 0.1.1","text":"CRAN release: 2022-08-24 First CRAN release.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/news/index.html","id":"interactionpower-0106","dir":"Changelog","previous_headings":"","what":"InteractionPoweR 0.1.0.6","title":"InteractionPoweR 0.1.0.6","text":"Added power_interaction_r2() function analytic power.","code":""},{"path":"https://dbaranger.github.io/InteractionPoweR/news/index.html","id":"interactionpower-0105","dir":"Changelog","previous_headings":"","what":"InteractionPoweR 0.1.0.5","title":"InteractionPoweR 0.1.0.5","text":"Adds options simulate ordinal variables (e.g., likert scale) power_interaction() using ‘k.x1’, ‘k.x2’, ‘k.y’ options. Also speed-minor bug-fixes.","code":""}]
